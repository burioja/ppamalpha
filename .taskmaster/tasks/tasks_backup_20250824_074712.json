{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "탑바 구현",
        "description": "앱 상단에 위치한 탑바 컴포넌트 구현. 검색 기능, 현재 위치 표시, 현금 보유 표시, 개인 설정 아이콘 포함.",
        "details": "1. 검색어 입력창 구현:\n   - placeholder: '무엇을 찾을까요? (#쿠폰, @가게, 텍스트)'\n   - 좌측 검색 아이콘, 텍스트 입력 시 우측 X 버튼 표시\n   - 키보드 엔터 시 검색 실행\n   - 입력 디바운스 250ms 적용, 자동완성 10개 제한\n\n2. MeiliSearch 연동:\n   - posts_index, stores_index 인덱스 활용\n   - 바텀 탭에 따라 검색 분기 처리 (지도/인박스)\n   - Firestore 보강 조회 구현 (권한/타겟팅/거리 조건)\n\n3. 현재 위치 표시 기능:\n   - GPS 기반 현재 위치 가져오기\n   - 기지국 기반 위치 검증 기능 구현\n   - WiFi 기반 위치 검증 기능 구현\n   - 읍/면/동 단위 주소 축약 표기\n   - 터치 시 지도 화면의 goToCurrentLocation() 호출\n\n4. 현금 보유 표시:\n   - ₩1,234 포맷으로 표시\n   - 터치 시 BudgetScreen으로 이동\n\n5. 개인 설정 아이콘:\n   - 터치 시 SettingsScreen으로 이동\n\n6. 오류 처리:\n   - 네트워크 장애 시 토스트 메시지 표시\n   - MeiliSearch 타임아웃 시 Firestore fallback 구현\n   - 위치 권한 거부 시 비활성 상태 및 설정 유도 스낵바 표시",
        "testStrategy": "1. 검색 기능 테스트:\n   - 다양한 검색어 입력 시 정확한 결과 반환 확인\n   - 바텀 탭 상태에 따른 검색 분기 동작 검증\n   - 자동완성 기능 및 제한 개수 확인\n   - 네트워크 오류 시 적절한 오류 메시지 표시 확인\n\n2. 위치 표시 테스트:\n   - GPS 권한 허용/거부 시 동작 확인\n   - 위치 정보 정확도 검증\n   - 위치 터치 시 지도 이동 기능 확인\n\n3. UI 테스트:\n   - 다양한 화면 크기에서 레이아웃 확인\n   - 다크/라이트 모드 호환성 확인\n   - 애니메이션 및 전환 효과 확인",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "검색 입력 UI 및 동작 구현",
            "description": "검색 입력창, 좌측 아이콘/우측 X, 엔터키 처리, 250ms 디바운스",
            "dependencies": [],
            "details": "- placeholder: '무엇을 찾을까요? (#쿠폰, @가게, 텍스트)'\n- 좌측 검색 아이콘, 입력 시 우측 X 표시 및 clear\n- 엔터키로 검색 트리거, IME action 대응\n- 입력 디바운스 250ms 적용",
            "status": "pending",
            "testStrategy": "1) 엔터/버튼 트리거 모두 동작\n2) 250ms 디바운스 유효\n3) X 버튼 clear 및 focus 유지 동작"
          },
          {
            "id": 2,
            "title": "MeiliSearch 연동 및 탭별 분기 + Firestore 보강",
            "description": "posts_index/stores_index 검색, 탭(map/inbox)에 따른 분기, Firestore 보강 조회",
            "dependencies": ["11.1"],
            "details": "- MeiliSearch 클라이언트 설정 및 인덱스 연결\n- 자동완성 10개 제한, 쿼리 하이라이트(가능시)\n- 바텀 탭 상태(map/inbox)에 따른 검색 소스/필드 분기\n- Firestore 보강 조회(권한/타겟/거리 조건) 적용",
            "status": "pending",
            "testStrategy": "1) 자동완성 10개 제한 확인\n2) 탭별 결과 소스 분기 일치성\n3) 네트워크 오류/타임아웃 시 폴백 처리"
          },
          {
            "id": 3,
            "title": "현재 위치 표시 및 주소 축약/지도 이동 연동",
            "description": "GPS/기지국/WiFi 융합 검증, 읍/면/동 축약 표기, 지도 goToCurrentLocation 연동",
            "dependencies": [],
            "details": "- 위치 권한 요청/상태 관리\n- GPS/Cell/WiFi 검증 후 신뢰도 우선 표기\n- 읍/면/동 축약 표기 로직\n- 터치 시 지도 goToCurrentLocation() 호출",
            "status": "pending",
            "testStrategy": "1) 권한 허용/거부/영구거부 플로우\n2) 주소 축약 규칙/로케일 검증\n3) 지도 이동 트리거 동작"
          },
          {
            "id": 4,
            "title": "현금 보유 표시 및 이동",
            "description": "₩1,234 포맷 표기 및 BudgetScreen으로 이동",
            "dependencies": [],
            "details": "- 통화 포맷/로케일 대응\n- 터치 시 BudgetScreen 네비게이션",
            "status": "pending",
            "testStrategy": "1) 금액 포맷/반올림/로케일\n2) BudgetScreen 라우팅 파라미터 전달"
          },
          {
            "id": 5,
            "title": "개인 설정 아이콘 및 이동",
            "description": "SettingsScreen으로 이동",
            "dependencies": [],
            "details": "- 아이콘 배치/접근성 라벨\n- SettingsScreen 네비게이션",
            "status": "pending",
            "testStrategy": "1) 포커스/접근성 라벨\n2) SettingsScreen 라우팅 동작"
          },
          {
            "id": 6,
            "title": "오류/권한 예외 처리",
            "description": "네트워크/타임아웃/권한 거부 토스트/스낵바 및 폴백 처리",
            "dependencies": ["11.2", "11.3"],
            "details": "- MeiliSearch 타임아웃 시 Firestore 폴백\n- 위치 권한 거부 시 비활성/설정 유도 스낵바\n- 공통 토스트/로그 정책 적용",
            "status": "pending",
            "testStrategy": "1) 타임아웃/오류 폴백 UX\n2) 권한 거부 스낵바/설정 이동\n3) 로깅 일관성"
          }
        ]
      },
      {
        "id": 12,
        "title": "바텀 네비게이션 및 화면 전환 구현",
        "description": "앱 하단에 위치한 바텀 네비게이션 바 구현 및 화면 전환 기능 개발. 지도, 인박스, 스토어, 지갑 등의 탭 포함.",
        "details": "1. 바텀 네비게이션 UI 구현:\n   - 5개 탭 구성: 지도(Map), 인박스(Inbox), 스토어(Store), 커뮤니티(선택), 지갑(Wallet)\n   - 각 탭 아이콘 및 라벨 디자인\n   - 선택된 탭 하이라이트 효과\n\n2. 화면 전환 로직 구현:\n   - 탭 선택 시 해당 화면으로 전환\n   - 상단 StatusBar(사용자 컨테이너) 고정 유지\n   - 화면 전환 애니메이션 적용\n\n3. 컨텍스트 버튼 구현:\n   - 지도 탭 활성화 시 바텀의 특정 버튼을 내 위치 트리거로 전환\n   - 커뮤니티 탭일 때 글쓰기로 전환(선택 사항)\n\n4. 라우팅 설정:\n   - /main?tab=map|inbox|store|wallet 쿼리 파라미터 유지\n   - 딥링크 지원 설정\n\n5. 상태 관리:\n   - 현재 선택된 탭 상태 관리\n   - 탭 간 데이터 공유 메커니즘 구현",
        "testStrategy": "1. 네비게이션 기능 테스트:\n   - 각 탭 선택 시 올바른 화면 전환 확인\n   - 탭 전환 시 상단 StatusBar 유지 확인\n   - 컨텍스트 버튼 동작 검증\n\n2. 라우팅 테스트:\n   - URL 파라미터에 따른 올바른 탭 활성화 확인\n   - 딥링크를 통한 특정 탭 접근 테스트\n\n3. UI 테스트:\n   - 다양한 화면 크기에서 바텀 네비게이션 레이아웃 확인\n   - 다크/라이트 모드 호환성 확인\n   - 애니메이션 및 전환 효과 확인",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "바텀 네비게이션 UI 구성",
            "description": "아이콘/라벨/선택 하이라이트, 5개 탭 구성(map/inbox/store/community(optional)/wallet)",
            "dependencies": [],
            "details": "- 탭 아이템 컴포넌트화\n- 선택 상태 하이라이트/애니메이션\n- 접근성 라벨/포커스 이동",
            "status": "pending",
            "testStrategy": "1) 탭 선택/포커스/라벨 접근성\n2) 다크/라이트 모드/반응형 레이아웃"
          },
          {
            "id": 2,
            "title": "화면 전환 로직 및 상단 StatusBar 고정",
            "description": "탭 선택 시 화면 전환, 상단 사용자 컨테이너 고정, 전환 애니메이션",
            "dependencies": ["12.1"],
            "details": "- 네비게이션 스택/탭 구성\n- StatusBar 고정 레이아웃\n- 전환 애니메이션 적용",
            "status": "pending",
            "testStrategy": "1) 전환 애니메이션 프레임/깜빡임\n2) StatusBar 고정 유지"
          },
          {
            "id": 3,
            "title": "컨텍스트 버튼 동작",
            "description": "지도 탭일 때 내 위치, 커뮤니티 탭일 때 글쓰기(선택) 트리거",
            "dependencies": ["12.1", "12.2"],
            "details": "- 탭별 컨텍스트 액션 매핑\n- 아이콘/툴팁/롱프레스 힌트(선택)",
            "status": "pending",
            "testStrategy": "1) 탭별 액션 전환 정확성\n2) 지도 탭에서 내 위치 트리거 동작"
          },
          {
            "id": 4,
            "title": "라우팅 및 딥링크 설정",
            "description": "/main?tab=map|inbox|store|wallet 쿼리 유지, 딥링크 지원",
            "dependencies": ["12.2"],
            "details": "- 탭 상태 <-> URL 동기화\n- 딥링크 파라미터 파싱 및 초기 탭 설정",
            "status": "pending",
            "testStrategy": "1) 새로고침/재진입 시 탭 복원\n2) 딥링크로 특정 탭 진입"
          },
          {
            "id": 5,
            "title": "상태 관리 및 데이터 공유",
            "description": "현재 탭 상태 및 탭 간 공유 데이터 관리",
            "dependencies": ["12.1"],
            "details": "- 전역/컨텍스트 상태 설계\n- 메모이제이션/성능 최적화",
            "status": "pending",
            "testStrategy": "1) 탭 간 상태 누수/리렌더링 비용\n2) 메모이제이션 효과 검증"
          }
        ]
      },
      {
        "id": 13,
        "title": "지도 화면 구현",
        "description": "Google 지도 API를 활용한 지도 화면 구현. 마커 표시, 클러스터링, 포스트 필터링, 롱프레스 기능 등 포함.",
        "details": "1. Google 지도 API 통합:\n   - 지도 스타일 적용 (지형, 도로, 건물 외 아무것도 표시되지 않음)\n   - 야간/주간 모드 자동 전환 지원\n\n2. Fog of War 구현:\n   - 최근 30일간 방문한 장소 밝게 표시\n   - visits/{uid}/points 데이터 활용\n   - 히트맵 형태로 시각화\n\n3. 마커 및 클러스터링 구현:\n   - 마커 아이콘 표시 (포스트 타입에 따라 다른 아이콘)\n   - 30m 이내 마커는 합쳐서 숫자로 표시\n   - 지도 줌에 따라 마커 클러스터링 처리\n   - 동일 타입/동일 소유자 우선 병합 로직 구현\n\n4. 포스트 필터링 기능:\n   - 일반/쿠폰 토글 필터 구현\n   - 거리 슬라이더 구현 (기본 3km)\n   - 정렬 옵션 구현 (가까운순/최신순)\n\n5. 롱프레스 기능 구현:\n   - 롱프레스 시 해당 위치 좌표 저장\n   - 포스트 배포화면(1.1)으로 이동 기능\n\n6. 위치 기반 포스트 수신 기능:\n   - GPS, 기지국, WiFi 기반 위치 확인\n   - 30m 이내 포스트 수신 기능 구현\n   - 위치 스푸핑 감지 및 차단 로직 구현",
        "testStrategy": "1. 지도 기능 테스트:\n   - 지도 로딩 및 스타일 적용 확인\n   - 다양한 줌 레벨에서 마커 표시 및 클러스터링 확인\n   - Fog of War 표시 정확성 검증\n\n2. 마커 및 클러스터링 테스트:\n   - 30m 이내 마커 병합 정확성 확인\n   - 클러스터 터치 시 확장 기능 검증\n   - 마커 아이콘 타입별 표시 확인\n\n3. 필터링 테스트:\n   - 필터 적용 시 마커 업데이트 확인\n   - 거리 필터 정확성 검증\n   - 정렬 옵션 동작 확인\n\n4. 롱프레스 및 포스트 수신 테스트:\n   - 롱프레스 시 정확한 좌표 전달 확인\n   - 위치 기반 포스트 수신 정확성 검증\n   - 위치 스푸핑 감지 기능 테스트",
        "priority": "high",
        "dependencies": [
          11,
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Google 지도 API 통합 및 스타일링",
            "description": "Google 지도 API를 앱에 통합하고 필요한 스타일을 적용하는 작업",
            "dependencies": [],
            "details": "1. Google Maps API 키 발급 및 프로젝트 설정\n2. 지도 기본 통합 (MapView/MapFragment 구현)\n3. 커스텀 지도 스타일 적용 (지형, 도로, 건물만 표시)\n4. 야간/주간 모드 자동 전환 기능 구현\n5. 지도 초기 위치 및 줌 레벨 설정\n6. 지도 컨트롤 UI 커스터마이징\n7. 지도 로딩 상태 및 오류 처리 구현\n\n기술 스택: Google Maps SDK, JSON 스타일링, 안드로이드/iOS 네이티브 통합\n예상 소요 시간: 8-10시간",
            "status": "pending",
            "testStrategy": "1) API 키 누락/잘못된 키일 때 오류 배너/로깅 확인\n2) 지도 최초 로딩 시간(Cold/Warm) 수집 및 임계값 하회 확인\n3) 주/야간 모드 전환 시 스타일 동기 반영(깜빡임/깊은 재마운트 없음)\n4) 초기 카메라 위치/줌이 기획값과 일치하는지 확인\n5) 지도 컨트롤(줌, 나침반, 현재위치) 노출/숨김 조건 검증\n6) 네트워크 끊김/복구 시 지도 타일/오류 처리 동작 확인\n7) iOS/Android 상이 동작 및 권한 프롬프트 차이 리그레션 체크"
          },
          {
            "id": 2,
            "title": "Fog of War 시각화 구현",
            "description": "최근 30일간 방문한 장소를 히트맵 형태로 시각화하는 Fog of War 기능 구현",
            "dependencies": [
              "13.1"
            ],
            "details": "1. visits/{uid}/points 데이터 구조 설계 및 연동\n2. 방문 데이터 쿼리 및 필터링 로직 구현 (최근 30일)\n3. 히트맵 오버레이 구현 (Google Maps Heatmap 활용)\n4. 방문 빈도에 따른 히트맵 강도 조절 로직\n5. 실시간 업데이트 및 캐싱 메커니즘 구현\n6. 성능 최적화 (대량 데이터 처리)\n7. 방문 데이터 없는 영역 어둡게 처리\n\n기술 스택: Google Maps Heatmap API, Firestore 실시간 리스너, 지오해싱\n예상 소요 시간: 12-15시간",
            "status": "pending",
            "testStrategy": "1) 최근 30일 필터 정확성(31일 데이터는 제외)\n2) 방문 빈도에 따른 히트맵 강도 그라데이션 시각 확인\n3) 실시간 업데이트 시 프레임 드랍/깜빡임 없는지 확인\n4) 1만+ 포인트 대량 데이터 성능(메인스레드 블록 여부)\n5) 캐싱 이후 재진입 시 로딩 시간 단축 검증\n6) 데이터 없는 구역이 어두운 톤으로 일관되게 표현되는지 확인"
          },
          {
            "id": 3,
            "title": "마커 및 클러스터링 시스템 개발",
            "description": "포스트 타입별 마커 표시 및 클러스터링 기능 구현",
            "dependencies": [
              "13.1"
            ],
            "details": "1. 포스트 타입별 마커 아이콘 디자인 및 구현\n2. 마커 렌더링 및 이벤트 처리 로직 구현\n3. 30m 이내 마커 클러스터링 알고리즘 개발\n4. 동일 타입/동일 소유자 우선 병합 로직 구현\n5. 줌 레벨에 따른 클러스터링 동적 조정\n6. 클러스터 터치 이벤트 및 확장 기능 구현\n7. 마커 데이터 캐싱 및 성능 최적화\n\n기술 스택: Google Maps Marker API, 클러스터링 알고리즘, 공간 인덱싱\n예상 소요 시간: 15-18시간",
            "status": "pending",
            "testStrategy": "1) 30m 병합 기준 정확성(경계값 포함)\n2) 동일 타입/동일 소유자 우선 병합 규칙 일관성 검증\n3) 줌 레벨 변화 시 클러스터링/디클러스터링 전환 애니메이션/성능\n4) 클러스터 터치 시 확장/줌 동작 및 선택 이벤트 전달 확인\n5) 수백/수천 마커에서 프레임/메모리 프로파일링\n6) 캐시된 마커 데이터 재사용으로 재진입 성능 개선 확인"
          },
          {
            "id": 4,
            "title": "포스트 필터링 UI 및 로직 구현",
            "description": "포스트 타입, 거리, 정렬 기준에 따른 필터링 기능 구현",
            "dependencies": [
              "13.3"
            ],
            "details": "1. 필터링 UI 컴포넌트 설계 및 구현 (토글, 슬라이더, 드롭다운)\n2. 일반/쿠폰 토글 필터 구현\n3. 거리 슬라이더 구현 (기본 3km, 조절 가능)\n4. 정렬 옵션 구현 (가까운순/최신순)\n5. 필터 적용 시 실시간 마커 업데이트 로직\n6. 필터 상태 저장 및 복원 기능\n7. 필터링 성능 최적화 (대량 마커 처리)\n\n기술 스택: 커스텀 UI 컴포넌트, 상태 관리, 공간 쿼리 최적화\n예상 소요 시간: 10-12시간",
            "status": "pending",
            "testStrategy": "1) 일반/쿠폰 토글이 서버/클라이언트 양쪽에서 동일 결과를 보이는지\n2) 거리 슬라이더 경계값(0.5km, 3km, 최대) 테스트\n3) 정렬(가까운순/최신순) 결과의 안정성 및 타이브레이크 규칙 검증\n4) 필터 상태 저장/복원(앱 재시작/탭 전환) 동작 확인\n5) 대량 마커 상황에서 필터 변경 시 FPS 유지 및 입력 지연 측정"
          },
          {
            "id": 5,
            "title": "롱프레스 기능 및 이벤트 처리",
            "description": "지도 롱프레스 이벤트 처리 및 포스트 배포 화면 연동",
            "dependencies": [
              "13.1"
            ],
            "details": "1. 지도 롱프레스 이벤트 리스너 구현\n2. 롱프레스 위치 좌표 추출 및 저장 로직\n3. 롱프레스 시각적 피드백 구현 (마커 또는 리플 이펙트)\n4. 포스트 배포화면(1.1)으로 이동 기능 구현\n5. 좌표 데이터 전달 메커니즘 구현\n6. 롱프레스 제스처 감도 및 타이밍 최적화\n7. 다양한 기기 및 화면 크기 대응\n\n기술 스택: 제스처 인식, 화면 전환 애니메이션, 상태 전달\n예상 소요 시간: 6-8시간",
            "status": "pending",
            "testStrategy": "1) 롱프레스 길이/감도(짧은 탭과 구분) 정확성\n2) 좌표 추출 값이 지도 픽셀/지오 좌표 변환과 일치하는지\n3) 롱프레스 시각 피드백 지연/프레임 저하 여부\n4) 배포 화면으로의 네비게이션/좌표 전달 정확성\n5) 다양한 화면 밀도/회전에 따른 제스처 인식 안정성"
          },
          {
            "id": 6,
            "title": "위치 기반 포스트 수신 시스템 구현",
            "description": "사용자 위치 기반 포스트 수신 및 처리 시스템 구현",
            "dependencies": [
              "13.1",
              "13.3"
            ],
            "details": "1. GPS, 기지국, WiFi 기반 위치 확인 로직 구현\n2. 위치 정확도 및 신뢰도 계산 알고리즘 개발\n3. 30m 이내 포스트 수신 및 필터링 로직 구현\n4. 위치 스푸핑 감지 및 차단 메커니즘 개발\n5. 백그라운드 위치 업데이트 처리\n6. 배터리 최적화 (위치 업데이트 주기 조절)\n7. 오프라인 상태 처리 및 동기화 로직\n\n기술 스택: 위치 서비스 API, 지오펜싱, 스푸핑 감지 알고리즘\n예상 소요 시간: 14-16시간",
            "status": "pending",
            "testStrategy": "1) GPS/Cell/WiFi 각각의 정확도/신뢰도 산출 검증\n2) 30m 이내 수신 경계 테스트(29m 수신, 31m 미수신)\n3) 스푸핑 감지(모의위치/급격한 이동) 시 차단/로그 동작 확인\n4) 백그라운드 업데이트 주기/배터리 소모 측정\n5) 오프라인 큐잉/재동기화 정확성 및 중복 방지"
          }
        ]
      },
      {
        "id": 14,
        "title": "포스트 배포 및 설정 화면 구현",
        "description": "포스트 배포 관련 화면 구현. 위치, 주소, 업종 기반 포스트 배포 기능 포함.",
        "details": "1. 포스트 배포화면(팝업) 구현:\n   - 하단 모달 형태로 구현\n   - 세 가지 옵션 제공: 이 위치에 뿌리기, 이 주소에 뿌리기, 특정 업종에 뿌리기\n   - 취소 버튼 및 설명 텍스트 포함\n\n2. 위치 기반 포스트 설정화면 구현:\n   - 지도에서 롱프레스한 포인트(GPS 기반) 표시\n   - 좌표 고정 후 ±10m 편집 허용\n   - 포스트 선택 타일 구현 (저장된 포스트 불러오기)\n   - 배포 수량 및 가격 입력 필드 구현\n   - 토탈 가격 실시간 계산 및 표시\n   - 배포 버튼 구현 (/asset/ppam_work 아이콘으로 마커 표시)\n\n3. 주소 기반 포스트 설정화면 구현:\n   - 지도에서 롱프레스한 포인트의 주소 표시\n   - Reverse Geocoding 구현 (행정동/도로명 동시 표기)\n   - 주소 수정 기능 구현\n   - 나머지 기능은 위치 기반 설정화면과 동일\n\n4. 업종 기반 포스트 설정화면 구현:\n   - 지도에서 롱프레스한 위치(GPS 기반) 표시 및 3km 반경 표시\n   - 업종 선택 드롭다운 구현 (요식업, 배움 등)\n   - 선택 업종 개수 실시간 표시\n   - 대상 집합 계산 및 혼잡 경고 표시\n   - 나머지 기능은 위치 기반 설정화면과 동일\n\n5. 결제 및 정산 로직 구현:\n   - 총액 + 수수료 미리보기 표시\n   - 배포 시 예치(escrow) 홀드 처리\n   - 지갑 잔액 부족 시 BudgetScreen 이동 유도",
        "testStrategy": "1. 배포화면 테스트:\n   - 모달 표시 및 옵션 선택 기능 확인\n   - 권한 검증 (로그인/계정/지갑 생성 완료 사용자만 가능)\n\n2. 위치 기반 설정화면 테스트:\n   - GPS 좌표 표시 정확성 확인\n   - 포스트 선택 및 불러오기 기능 검증\n   - 수량/가격 입력 및 계산 정확성 확인\n   - 배포 버튼 동작 및 마커 생성 확인\n\n3. 주소 기반 설정화면 테스트:\n   - Reverse Geocoding 정확성 확인\n   - 주소 수정 기능 검증\n   - 배포 기능 정상 동작 확인\n\n4. 업종 기반 설정화면 테스트:\n   - 업종 선택 및 개수 표시 정확성 확인\n   - 3km 반경 내 업종 필터링 정확성 검증\n   - 배포 기능 정상 동작 확인\n\n5. 결제 및 정산 테스트:\n   - 수수료 계산 정확성 확인\n   - 잔액 부족 시 적절한 안내 확인\n   - 예치 홀드 처리 정확성 검증",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "포스트 배포 모달 및 옵션 선택 UI 구현",
            "description": "하단 모달 형태의 포스트 배포 화면을 구현하고, 세 가지 배포 옵션(위치, 주소, 업종 기반)을 선택할 수 있는 UI 개발",
            "dependencies": [],
            "details": "- 하단 모달 컴포넌트 구현 (BottomSheet 활용)\n- 세 가지 배포 옵션 버튼 디자인 및 구현: '이 위치에 뿌리기', '이 주소에 뿌리기', '특정 업종에 뿌리기'\n- 각 옵션 선택 시 해당 설정 화면으로 전환하는 네비게이션 로직 구현\n- 취소 버튼 및 설명 텍스트 추가\n- 사용자 권한 검증 로직 구현 (로그인/계정/지갑 생성 완료 사용자만 접근 가능)\n- 모달 표시/숨김 애니메이션 구현",
            "status": "pending",
            "testStrategy": "1) 모달 열기/닫기 애니메이션 및 배경 스크롤 락 확인\n2) 세 옵션 버튼 터치 영역/포커스 상태/접근성 라벨 검증\n3) 권한 미충족(미로그인/지갑없음) 차단 및 안내 흐름 확인\n4) 각 옵션 선택 시 올바른 화면으로 전환되는지 라우팅 검증\n5) 백버튼/스와이프다운 등 해제 제스처 동작 확인"
          },
          {
            "id": 2,
            "title": "위치 기반 포스트 설정 화면 및 기능 개발",
            "description": "지도에서 롱프레스한 위치를 기반으로 포스트를 배포하는 설정 화면 및 관련 기능 구현",
            "dependencies": [
              "14.1"
            ],
            "details": "- 지도에서 롱프레스한 포인트(GPS 좌표) 표시 기능 구현\n- 좌표 고정 후 ±10m 범위 내 편집 기능 개발\n- 포스트 선택 타일 UI 구현 (저장된 포스트 목록 불러오기)\n- 배포 수량 입력 필드 및 유효성 검사 구현\n- 가격 입력 필드 및 실시간 계산 로직 구현\n- 토탈 가격 실시간 계산 및 표시 기능\n- 배포 버튼 및 마커 표시 기능 구현 (/asset/ppam_work 아이콘 사용)\n- 위치 데이터 저장 및 관리 로직 개발",
            "status": "pending",
            "testStrategy": "1) 롱프레스 좌표 수신/±10m 편집 반영 정확도\n2) 수량/가격 입력 유효성 및 토탈 계산 정확성(경계값)\n3) 저장된 포스트 목록 로딩/선택/미리보기 동작\n4) 배포 버튼 실행 시 마커 생성 및 화면 전환 검증\n5) 잘못된 입력/네트워크 오류 시 에러 메시지/재시도 동작"
          },
          {
            "id": 3,
            "title": "주소 및 업종 기반 포스트 설정 화면 구현",
            "description": "주소 기반 및 업종 기반 포스트 배포를 위한 설정 화면과 관련 기능 개발",
            "dependencies": [
              "14.1",
              "14.2"
            ],
            "details": "- 주소 기반 설정 화면 구현:\n  * Reverse Geocoding 기능 구현 (행정동/도로명 동시 표기)\n  * 주소 수정 기능 개발\n  * 주소 검증 및 저장 로직 구현\n\n- 업종 기반 설정 화면 구현:\n  * 3km 반경 시각화 기능 개발\n  * 업종 선택 드롭다운 메뉴 구현 (요식업, 배움 등 카테고리)\n  * 선택 업종 개수 실시간 표시 기능\n  * 대상 집합 계산 및 혼잡 경고 표시 로직 개발\n  * 업종 데이터 관리 및 필터링 기능 구현",
            "status": "pending",
            "testStrategy": "1) Reverse Geocoding 정확성/지연 시 로딩표시/에러 핸들링\n2) 주소 수정 후 검증/저장 흐름 확인\n3) 업종 드롭다운 선택/개수 표기/3km 반경 시각화 정확성\n4) 혼잡 경고 노출 조건 및 UX 검증\n5) 위치/주소/업종 모드 간 전환 상태 유지"
          },
          {
            "id": 4,
            "title": "결제 및 정산 로직 개발",
            "description": "포스트 배포를 위한 결제 및 정산 관련 기능 구현",
            "dependencies": [
              "14.2",
              "14.3"
            ],
            "details": "- 총액 계산 로직 구현 (배포 수량 × 단가)\n- 수수료 계산 및 미리보기 표시 기능 개발\n- 배포 시 예치(escrow) 홀드 처리 로직 구현\n- 지갑 잔액 확인 및 부족 시 BudgetScreen 이동 유도 기능\n- 결제 확인 다이얼로그 구현\n- 결제 성공/실패 처리 및 사용자 피드백 UI 개발\n- 트랜잭션 기록 저장 및 관리 기능 구현\n- 결제 보안 검증 로직 개발",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 15,
        "title": "인박스 화면 및 포스트 관리 구현",
        "description": "인박스 화면 구현 및 포스트 관리 기능 개발. 내 포스트, 받은 포스트 탭 및 포스트 만들기 기능 포함.",
        "details": "1. 인박스 화면 UI 구현:\n   - 탭 메뉴 구현 (내 포스트, 받은 포스트)\n   - 리스트 표시 (썸네일, 발행자, 포스트타입, 내용)\n   - 필터링 기능 구현 (소멸시기순, 받은날짜순)\n   - 플로팅 버튼 구현 (포스트 만들기로 이동)\n   - 무한 스크롤 및 스켈레톤 로딩 구현\n\n2. 내 포스트 만들기 기능 구현:\n   - 그림파일 업로드 기능 (이미지 리사이즈, WebP 변환)\n   - 텍스트 입력 필드 구현\n   - 사운드 업로드 기능 (m4a 포맷)\n   - 링크 추가 기능 및 검증 (금칙어/금지 URL 필터)\n   - 포스트 타입 선택 UI (일반, 쿠폰)\n   - 포스트 소멸시효 선택 UI (~30일)\n   - 포스트 사용 시 선택 UI (발행자에게 송금)\n   - 포스트 전달기능 및 응답기능 체크박스\n   - 타겟팅 설정 UI (성별, 나이 등)\n   - 텍스트와 그림파일 합성 이미지 생성 기능\n   - 포스트 ID 생성 로직 구현\n\n3. 받은 포스트 상세 화면 구현:\n   - 포스트 상세 정보 표시\n   - 쿠폰인 경우 사용하기 버튼 구현 (GPS 기반 인증)\n   - 전달하기 버튼 구현 (전달 가능한 경우)\n   - 응답 기능 구현 (대화창 및 메시지 쓰레드)\n   - 스토어로 이동 버튼 구현 (연결된 storeId가 있는 경우)\n\n4. 데이터 연동:\n   - user_posts(내가 만든), received_posts(내가 받은) 서브컬렉션 연동\n   - 포스트 상태 관리 (초안/게시 상태 구분)",
        "testStrategy": "1. 인박스 화면 테스트:\n   - 탭 전환 및 리스트 표시 확인\n   - 필터링 기능 동작 검증\n   - 무한 스크롤 및 로딩 상태 확인\n\n2. 포스트 만들기 테스트:\n   - 이미지/사운드 업로드 기능 확인\n   - 텍스트 입력 및 링크 추가 기능 검증\n   - 포스트 타입 및 옵션 선택 기능 확인\n   - 타겟팅 설정 정확성 검증\n   - 이미지 합성 및 ID 생성 정확성 확인\n\n3. 받은 포스트 상세 화면 테스트:\n   - 포스트 정보 표시 정확성 확인\n   - 쿠폰 사용 기능 및 GPS 인증 검증\n   - 전달 및 응답 기능 동작 확인\n   - 스토어 이동 버튼 동작 확인\n\n4. 데이터 연동 테스트:\n   - Firestore 데이터 읽기/쓰기 정확성 확인\n   - 포스트 상태 변경 및 업데이트 검증",
        "priority": "medium",
        "dependencies": [
          11,
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "인박스 화면 UI 및 탭 구현",
            "description": "인박스 화면의 기본 UI 구조와 탭 메뉴(내 포스트, 받은 포스트) 구현",
            "dependencies": [],
            "details": "- 탭 메뉴 구현 (내 포스트, 받은 포스트)\n- 리스트 표시 컴포넌트 개발 (썸네일, 발행자, 포스트타입, 내용)\n- 필터링 기능 구현 (소멸시기순, 받은날짜순)\n- 플로팅 버튼 구현 (포스트 만들기로 이동)\n- 무한 스크롤 및 스켈레톤 로딩 구현\n- 탭 전환 시 애니메이션 및 상태 관리 구현\n- 빈 상태 UI 처리 (포스트가 없을 때)",
            "status": "pending",
            "testStrategy": "1) 총액/수수료 계산 정확성(반올림/경계값)\n2) 예치(escrow) 홀드 트랜잭션 생성/상태 추적\n3) 잔액 부족 시 BudgetScreen 유도 및 복귀 흐름\n4) 결제 성공/실패/취소 케이스별 사용자 피드백\n5) 트랜잭션 기록 저장/중복 방지/에러 재시도"
            "status": "pending",
            "testStrategy": "1) 탭 전환 시 리스트 유지/스켈레톤/무한스크롤 동작\n2) 필터(소멸시기/받은날짜) 정확성 및 정렬 일관성\n3) 플로팅 버튼 접근성/탭 전환 간 상태 유지\n4) 빈 상태/오류 상태 UI 노출 조건 검증\n5) 긴 리스트 스크롤 성능(FPS/메모리) 측정"
          },
          {
            "id": 2,
            "title": "포스트 만들기 기능 및 미디어 처리 개발",
            "description": "포스트 생성 화면 및 이미지, 사운드, 텍스트 등 미디어 처리 기능 구현",
            "dependencies": [
              "15.1"
            ],
            "details": "- 그림파일 업로드 기능 구현 (이미지 리사이즈, WebP 변환)\n- 텍스트 입력 필드 및 유효성 검사 구현\n- 사운드 업로드 기능 (m4a 포맷) 및 재생 컨트롤 개발\n- 링크 추가 기능 및 검증 (금칙어/금지 URL 필터)\n- 포스트 타입 선택 UI (일반, 쿠폰) 구현\n- 포스트 소멸시효 선택 UI (~30일) 개발\n- 포스트 사용 시 선택 UI (발행자에게 송금) 구현\n- 포스트 전달기능 및 응답기능 체크박스 개발\n- 타겟팅 설정 UI (성별, 나이 등) 구현\n- 텍스트와 그림파일 합성 이미지 생성 기능 개발",
            "status": "pending",
            "testStrategy": "1) 이미지 리사이즈/WebP 변환 품질/용량 확인\n2) m4a 업로드/재생 제어, 비정상 파일 오류 처리\n3) 링크 금칙어/금지 URL 필터 정확성\n4) 타입/소멸시효/송금옵션 선택 상태 저장\n5) 합성 이미지 생성 성능/메모리/해상도 검증"
          },
          {
            "id": 3,
            "title": "포스트 상세 화면 및 상호작용 기능 구현",
            "description": "받은 포스트 상세 화면 및 쿠폰 사용, 전달, 응답 등 상호작용 기능 개발",
            "dependencies": [
              "15.1"
            ],
            "details": "- 포스트 상세 정보 표시 화면 구현\n- 쿠폰인 경우 사용하기 버튼 구현 (GPS 기반 인증)\n- 전달하기 버튼 및 기능 구현 (전달 가능한 경우)\n- 응답 기능 구현 (대화창 및 메시지 쓰레드)\n- 스토어로 이동 버튼 구현 (연결된 storeId가 있는 경우)\n- 포스트 상태에 따른 UI 변화 처리 (만료, 사용됨 등)\n- 포스트 공유 기능 구현 (딥링크 생성)\n- 포스트 신고 기능 구현",
            "status": "pending",
            "testStrategy": "1) 쿠폰 사용(GPS 인증) 성공/실패/재시도 플로우\n2) 전달 가능 조건/제한 로직과 UI 피드백 확인\n3) 응답 쓰레드 작성/수신/알림 연동(있다면)\n4) 스토어 이동 버튼 라우팅/파라미터 전달 정확성\n5) 만료/사용됨 등 상태별 UI 변화 리그레션"
          },
          {
            "id": 4,
            "title": "Firestore 데이터 연동 및 상태 관리 개발",
            "description": "인박스 화면과 포스트 관련 Firestore 데이터 연동 및 상태 관리 구현",
            "dependencies": [
              "15.1",
              "15.2",
              "15.3"
            ],
            "details": "- user_posts(내가 만든), received_posts(내가 받은) 서브컬렉션 연동\n- 포스트 상태 관리 (초안/게시 상태 구분) 구현\n- 포스트 ID 생성 로직 구현\n- 실시간 업데이트 리스너 설정\n- 오프라인 지원 및 캐싱 전략 구현\n- 포스트 데이터 페이징 처리 (무한 스크롤 지원)\n- 포스트 필터링 및 정렬 쿼리 최적화\n- 에러 처리 및 재시도 메커니즘 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 16,
        "title": "스토어 화면 및 인증 기능 구현",
        "description": "스토어 화면 구현 및 인증 관련 기능 개발. 가게 정보 표시, 직원 인증, 리뷰 관리 등 포함.",
        "details": "1. 스토어 화면 UI 구현:\n   - 상단 커버 이미지 및 인증 뱃지 표시\n   - 가게명 및 가게 사진 표시\n   - 직원 인증 상태 표시\n   - 가게 설명 및 주소 표시\n   - 지도 미니맵 및 길찾기 버튼 구현\n\n2. 직원 인증 기능 구현:\n   - NFC 기반 인증 구현:\n     - 지정 태그 UID 매칭 로직\n     - 직원 등록 기기에서만 성공하도록 설정\n   - WiFi 기반 인증 구현:\n     - 등록 SSID/BSSID 근접성 검증\n     - 시간대 규칙 적용\n\n3. 스토어 수정 기능 구현:\n   - 인증 프로세스 구현 (사업자등록증/전화 인증)\n   - 가게명 및 사진 수정 기능\n   - 리뷰 관리 기능 (신고/블록, 별점 평균 계산)\n\n4. 데이터 연동:\n   - stores, store_staff, store_verifications 컬렉션 연동\n   - 구글 지도 파싱 및 주소 표시",
        "testStrategy": "1. 스토어 화면 UI 테스트:\n   - 가게 정보 표시 정확성 확인\n   - 인증 뱃지 및 상태 표시 확인\n   - 미니맵 및 길찾기 버튼 동작 검증\n\n2. 직원 인증 테스트:\n   - NFC 인증 정확성 및 보안성 검증\n   - WiFi 인증 정확성 및 보안성 검증\n   - 인증 실패 시 적절한 오류 메시지 확인\n\n3. 스토어 수정 테스트:\n   - 인증 프로세스 정확성 확인\n   - 정보 수정 및 저장 기능 검증\n   - 리뷰 관리 기능 동작 확인\n\n4. 데이터 연동 테스트:\n   - Firestore 데이터 읽기/쓰기 정확성 확인\n   - 구글 지도 파싱 정확성 검증",
        "priority": "medium",
        "dependencies": [
          11,
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "스토어 화면 UI 및 정보 표시 기능 구현",
            "description": "스토어 화면의 UI 컴포넌트 및 가게 정보 표시 기능을 개발합니다.",
            "dependencies": [],
            "details": "- 상단 커버 이미지 및 인증 뱃지 표시 구현\n- 가게명, 가게 사진, 설명 및 주소 표시 컴포넌트 개발\n- 직원 인증 상태 표시 UI 구현\n- 구글 지도 미니맵 통합 및 길찾기 버튼 기능 구현\n- 스토어 정보 로딩 및 에러 상태 처리\n- 반응형 레이아웃 및 다크/라이트 모드 지원",
            "status": "pending",
            "testStrategy": "1) 실시간 리스너 동기/오프라인 캐시/재연결 동작\n2) 페이징/커서 기반 스크롤 정확성 및 중복 방지\n3) 초안/게시 상태 전이(권한/검증) 정확성\n4) 실패 재시도/지수백오프/에러 토스트 일관성\n5) 쿼리 비용/성능(읽기횟수, 지연) 모니터링"
            "status": "pending",
            "testStrategy": "1) 커버/배지/정보/미니맵 로딩/에러 상태 처리\n2) 길찾기 버튼 외부 앱/내부 라우팅 정상 작동\n3) 반응형 레이아웃/다크모드 UI 품질\n4) 비정상/누락 데이터 표시 폴백 확인"
          },
          {
            "id": 2,
            "title": "NFC 기반 직원 인증 시스템 개발",
            "description": "NFC 태그를 활용한 직원 인증 시스템을 구현합니다.",
            "dependencies": [
              "16.1"
            ],
            "details": "- NFC 태그 읽기 기능 구현\n- 지정된 태그 UID 매칭 로직 개발\n- 직원 등록 기기 검증 메커니즘 구현\n- 인증 성공/실패 시 UI 피드백 제공\n- 인증 시도 로깅 및 보안 위반 감지 기능\n- 인증 상태 Firestore 연동 및 업데이트",
            "status": "pending",
            "testStrategy": "1) 태그 UID 매칭/오매칭 케이스/오류 처리\n2) 등록 기기 제한 검증/우회 방지 확인\n3) 인증 성공/실패 로그/토스트/상태 반영\n4) Firestore 연동 후 상태 일관성(오프라인 포함)"
          },
          {
            "id": 3,
            "title": "WiFi 기반 위치 인증 메커니즘 구현",
            "description": "WiFi SSID/BSSID를 활용한 위치 기반 인증 시스템을 개발합니다.",
            "dependencies": [
              "16.1"
            ],
            "details": "- 등록된 WiFi SSID/BSSID 스캔 및 검증 기능 구현\n- 근접성 검증 알고리즘 개발 (신호 강도 기반)\n- 시간대 규칙 적용 로직 구현 (특정 시간에만 인증 가능)\n- WiFi 스캔 권한 관리 및 사용자 안내 UI\n- 인증 결과 캐싱 및 만료 처리\n- 스푸핑 방지 보안 메커니즘 구현",
            "status": "pending",
            "testStrategy": "1) SSID/BSSID 스캔/등록/검증 성공/실패 케이스\n2) 신호강도 기반 근접성 기준 경계값 테스트\n3) 시간대 규칙 적용(허용/차단) 정확성\n4) 권한 거부/비활성화 안내 UX/재시도 흐름"
          },
          {
            "id": 4,
            "title": "스토어 관리 및 데이터 연동 기능 개발",
            "description": "스토어 정보 수정, 인증 프로세스, 리뷰 관리 및 Firestore 데이터 연동 기능을 구현합니다.",
            "dependencies": [
              "16.1",
              "16.2",
              "16.3"
            ],
            "details": "- 사업자등록증/전화 인증 프로세스 구현\n- 가게명 및 사진 수정 기능 개발\n- 리뷰 관리 기능 구현 (신고/블록, 별점 평균 계산)\n- stores, store_staff, store_verifications 컬렉션 연동\n- 구글 지도 파싱 및 주소 표시 기능\n- 데이터 캐싱 및 오프라인 지원 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 17,
        "title": "로그인 및 회원가입 화면 구현",
        "description": "로그인 및 회원가입 관련 화면 구현. 이메일/비밀번호 인증, 개인정보 입력, 약관 동의 등 포함.",
        "details": "1. 로그인 화면 UI 구현:\n   - PPAM 로고 표시\n   - 아이디(이메일) 및 비밀번호 입력 필드 구현\n   - 로그인 및 회원가입 버튼 구현\n   - 비밀번호 찾기 링크 구현\n   - Firebase Email/Password 인증 연동\n   - reCAPTCHA v3 연동 (봇 방지)\n   - 로그인 유지 체크박스 구현\n\n2. 회원가입 - 개인정보입력 화면 구현:\n   - 진행 단계 표시 (1/3)\n   - 이메일 입력 및 중복 확인 기능\n   - 이메일 인증 기능 (인증번호 발송 및 확인)\n   - 비밀번호 입력 및 확인 기능 (정책 검증)\n   - 모바일 번호 입력 및 인증 기능\n   - 생년월일 및 성별 선택 UI\n   - 주소 입력 기능 (어드레스 픽커 및 GPS 검증)\n   - 입력 검증 및 오류 메시지 표시\n\n3. 회원가입 - 추가정보입력 화면 구현:\n   - 진행 단계 표시 (2/3)\n   - 프로필 이미지 등록 기능\n   - 닉네임 입력 및 중복 확인 기능\n   - 근무지 추가 기능\n   - 콘텐츠 필터링 설정 UI (선정적/폭력적/혐오 자료)\n\n4. 회원가입 - 약관동의 화면 구현:\n   - 진행 단계 표시 (3/3)\n   - 서비스 약관 동의 UI\n   - 개인정보 수집 및 이용동의 UI\n   - 위치정보 수집 및 서비스 이용동의 UI\n   - 제3자 정보제공 이용동의 UI\n   - 원문보기 버튼 및 토글 기능\n   - 가입 및 계좌만들기 완료 버튼",
        "testStrategy": "1. 로그인 화면 테스트:\n   - 이메일/비밀번호 입력 및 검증 확인\n   - Firebase 인증 연동 정확성 검증\n   - reCAPTCHA 동작 확인\n   - 오류 메시지 표시 정확성 확인\n\n2. 회원가입 - 개인정보입력 테스트:\n   - 이메일 중복 확인 및 인증 기능 검증\n   - 비밀번호 정책 검증 확인\n   - 모바일 인증 정확성 확인\n   - 주소 입력 및 GPS 검증 확인\n   - 필수 입력 필드 검증 확인\n\n3. 회원가입 - 추가정보입력 테스트:\n   - 이미지 업로드 기능 확인\n   - 닉네임 중복 확인 정확성 검증\n   - 근무지 추가 기능 확인\n   - 콘텐츠 필터링 설정 저장 확인\n\n4. 회원가입 - 약관동의 테스트:\n   - 약관 표시 및 원문보기 기능 확인\n   - 토글 동작 및 상태 저장 확인\n   - 필수 동의 항목 검증 확인\n   - 가입 완료 프로세스 정확성 검증",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "로그인 화면 UI 및 인증 로직 구현",
            "description": "로그인 화면의 UI 컴포넌트 및 Firebase 인증 연동 구현",
            "dependencies": [],
            "details": "- PPAM 로고 및 브랜딩 요소 배치\n- 이메일/비밀번호 입력 필드 구현 (유효성 검사 포함)\n- 로그인 버튼 및 회원가입 버튼 구현\n- 비밀번호 찾기 링크 구현\n- Firebase Email/Password 인증 연동 (로그인 상태 관리 포함)\n- reCAPTCHA v3 연동 (봇 방지 기능)\n- 로그인 유지 체크박스 기능 구현\n- 로그인 실패 시 오류 메시지 표시 로직\n- 소셜 로그인 옵션 구현 (선택적)",
            "status": "pending",
            "testStrategy": "1) 사업자/전화 인증 단계별 예외/재시도 처리\n2) 정보 수정 저장/롤백/충돌(동시 수정) 처리\n3) 리뷰 신고/블록/평균 별점 계산 정확성\n4) 컬렉션 연동 쿼리 성능/오류 처리/오프라인"
            "status": "pending",
            "testStrategy": "1) 이메일/비밀번호 유효성/오류 메시지 정확성\n2) Firebase 로그인 성공/실패/락아웃/지연 처리\n3) reCAPTCHA v3 토큰 발급/검증 실패 처리\n4) 로그인 유지 체크 상태 복원/만료 케이스"
          },
          {
            "id": 2,
            "title": "회원가입 - 개인정보입력 화면 및 검증 로직 개발",
            "description": "회원가입 첫 단계인 개인정보 입력 화면 및 관련 검증 로직 구현",
            "dependencies": [
              "17.1"
            ],
            "details": "- 진행 단계 표시 UI 구현 (1/3)\n- 이메일 입력 필드 및 중복 확인 API 연동\n- 이메일 인증 기능 구현 (Firebase 인증 코드 발송 및 확인)\n- 비밀번호 입력 및 확인 필드 구현 (정책 검증: 8자 이상, 특수문자, 대소문자 포함)\n- 모바일 번호 입력 및 SMS 인증 기능 구현\n- 생년월일 선택 UI (DatePicker) 및 성별 선택 UI 구현\n- 주소 입력 기능 (어드레스 픽커 및 GPS 검증 연동)\n- 입력값 검증 및 오류 메시지 표시 로직\n- 다음 단계로 진행 버튼 및 상태 관리",
            "status": "pending",
            "testStrategy": "1) 이메일 중복확인/인증코드 발송/검증 타임아웃\n2) 비밀번호 정책(길이/문자종류) 경계값 검사\n3) SMS 인증 성공/실패/재전송 제한\n4) 주소 픽커+GPS 검증/오류 처리/저장"
          },
          {
            "id": 3,
            "title": "회원가입 - 추가정보입력 화면 및 기능 구현",
            "description": "회원가입 두 번째 단계인 추가정보 입력 화면 및 관련 기능 구현",
            "dependencies": [
              "17.2"
            ],
            "details": "- 진행 단계 표시 UI 구현 (2/3)\n- 프로필 이미지 등록 기능 (카메라/갤러리 접근, 이미지 크롭, Firebase Storage 업로드)\n- 닉네임 입력 필드 및 중복 확인 API 연동\n- 근무지 추가 기능 (주소 검색 및 저장)\n- 콘텐츠 필터링 설정 UI 구현 (선정적/폭력적/혐오 자료 필터링 옵션)\n- 사용자 설정 저장 로직 (Firestore 연동)\n- 이전 단계 및 다음 단계 이동 버튼 구현\n- 입력 데이터 유효성 검사 및 상태 관리",
            "status": "pending",
            "testStrategy": "1) 이미지 업로드/크롭/Storage 업로드 실패 복구\n2) 닉네임 중복확인 디바운스/경계값 테스트\n3) 근무지 추가 검색/저장/삭제 흐름\n4) 필터링 설정 값 저장/재진입 복원"
          },
          {
            "id": 4,
            "title": "회원가입 - 약관동의 화면 및 완료 프로세스 개발",
            "description": "회원가입 마지막 단계인 약관동의 화면 및 가입 완료 프로세스 구현",
            "dependencies": [
              "17.3"
            ],
            "details": "- 진행 단계 표시 UI 구현 (3/3)\n- 서비스 약관 동의 UI (체크박스 및 텍스트)\n- 개인정보 수집 및 이용동의 UI 구현\n- 위치정보 수집 및 서비스 이용동의 UI 구현\n- 제3자 정보제공 이용동의 UI 구현\n- 약관 원문보기 버튼 및 모달/토글 기능 구현\n- 전체 동의 기능 구현\n- 가입 완료 버튼 및 계정 생성 로직 (Firebase 및 Firestore 데이터 저장)\n- 가입 완료 후 환영 화면 및 메인 화면 이동 로직\n- 이전 단계 이동 버튼 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 18,
        "title": "Tajapay 계좌 연동 및 예산 화면 구현",
        "description": "Tajapay 계좌 생성 및 연동 기능 개발. 예산 화면 구현을 통한 잔액 관리, 충전, 출금 기능 포함.",
        "details": "1. Tajapay 계좌 생성 화면 구현:\n   - 계좌 생성 로딩 UI\n   - 계좌 생성 완료 메시지 및 계좌 정보 표시\n   - Tajapay API 연동 (계좌 생성 요청 및 응답 처리)\n   - KYC/AML 체크 연동 (외부 SDK/웹뷰)\n   - 홈으로 이동 버튼 구현\n\n2. 예산(Budget) 화면 UI 구현:\n   - 가용 잔액, 보류(에스크로) 금액, 누적 사용/수령 표시\n   - 충전, 출금, 내역, 카드/계좌 연동 버튼 구현\n   - 최근 트랜잭션 리스트 표시 (아이콘: 배포/수령/환불/수수료)\n\n3. 충전 및 출금 기능 구현:\n   - PG/계좌이체/타자페이 연동\n   - 본인 계좌 인증 및 출금 프로세스 구현 (T+1 정산)\n   - 최소 잔액 및 수수료 테이블 표시\n\n4. 트랜잭션 내역 기능 구현:\n   - wallet_transactions 페이지네이션 구현\n   - CSV 내보내기 기능 (선택)\n   - 트랜잭션 상세 정보 표시\n\n5. 데이터 연동:\n   - wallets/{uid}: balance, escrow, updatedAt\n   - wallet_transactions/{uid}/items: {type, amount, fee, postId, storeId, ts, status}",
        "testStrategy": "1. Tajapay 계좌 생성 테스트:\n   - API 연동 정확성 확인\n   - 계좌 생성 성공/실패 시나리오 검증\n   - KYC/AML 체크 프로세스 확인\n   - 오류 처리 및 재시도 기능 검증\n\n2. 예산 화면 UI 테스트:\n   - 잔액 및 트랜잭션 정보 표시 정확성 확인\n   - 버튼 동작 및 화면 전환 검증\n\n3. 충전 및 출금 테스트:\n   - 결제 프로세스 정확성 확인\n   - 계좌 인증 및 출금 프로세스 검증\n   - 수수료 계산 정확성 확인\n   - 오류 처리 및 안내 메시지 확인\n\n4. 트랜잭션 내역 테스트:\n   - 페이지네이션 동작 확인\n   - CSV 내보내기 기능 검증\n   - 트랜잭션 필터링 및 정렬 기능 확인\n\n5. 데이터 연동 테스트:\n   - Firestore 데이터 읽기/쓰기 정확성 확인\n   - 트랜잭션 상태 업데이트 검증",
        "priority": "high",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Tajapay API 연동 및 계좌 생성 프로세스 구현",
            "description": "Tajapay API를 연동하여 사용자 계좌 생성 프로세스를 구현합니다. 계좌 생성 요청 및 응답 처리, 오류 처리, 계좌 생성 화면 UI 개발을 포함합니다.",
            "dependencies": [],
            "details": "- Tajapay API 연동 구현 (인증, 요청/응답 처리)\n- 계좌 생성 로딩 UI 개발 (스켈레톤 또는 프로그레스 인디케이터)\n- 계좌 생성 완료 메시지 및 계좌 정보 표시 화면 구현\n- 오류 처리 및 재시도 메커니즘 구현\n- API 응답 데이터 파싱 및 로컬 저장소 연동\n- 보안 토큰 관리 및 암호화 처리\n- 홈으로 이동 버튼 구현",
            "status": "pending",
            "testStrategy": "1) 필수/선택 약관 체크 상태/전체동의 동기화\n2) 원문보기 모달/토글 접근성/포커스 관리\n3) 계정 생성/Firestore 저장 성공/롤백 처리\n4) 완료 후 환영/메인 이동 라우팅 정확성"
            "status": "pending",
            "testStrategy": "1) 인증 토큰 관리/갱신/만료 처리\n2) 계좌 생성 성공/실패/중복 요청 대비\n3) 로딩 UI/에러 메시지/재시도 플로우\n4) 응답 데이터 파싱/보안 저장 검증"
          },
          {
            "id": 2,
            "title": "KYC/AML 체크 통합 및 검증 로직 구현",
            "description": "사용자 신원 확인(KYC) 및 자금세탁방지(AML) 검증을 위한 외부 SDK/웹뷰 통합 및 검증 로직을 구현합니다.",
            "dependencies": [
              "18.1"
            ],
            "details": "- KYC/AML 외부 SDK 또는 웹뷰 통합\n- 사용자 신원 정보 수집 화면 구현\n- 신원 확인 프로세스 단계별 UI 개발\n- 검증 결과에 따른 분기 처리 로직 구현\n- 검증 실패 시 재시도 및 안내 메시지 표시\n- 검증 데이터 암호화 및 보안 처리\n- 검증 완료 후 Tajapay 계좌 연동 프로세스와 통합",
            "status": "pending",
            "testStrategy": "1) SDK/웹뷰 통합 단계별 오류/재시도\n2) 민감정보 암호화/전송/보관 정책 확인\n3) 결과 콜백 분기(승인/거절/보류) 처리\n4) 완료 후 계좌 연동 플로우 연결성"
          },
          {
            "id": 3,
            "title": "예산 화면 UI 및 잔액 관리 기능 구현",
            "description": "사용자의 예산(Budget) 화면 UI를 구현하고 잔액 관리 기능을 개발합니다. 가용 잔액, 에스크로 금액, 누적 사용/수령 정보 표시 및 관련 버튼 기능을 포함합니다.",
            "dependencies": [
              "18.1",
              "18.2"
            ],
            "details": "- 예산 화면 레이아웃 및 UI 컴포넌트 개발\n- 가용 잔액, 보류(에스크로) 금액, 누적 사용/수령 표시 구현\n- 충전, 출금, 내역, 카드/계좌 연동 버튼 UI 및 기능 연결\n- 최근 트랜잭션 리스트 표시 (아이콘: 배포/수령/환불/수수료)\n- wallets/{uid} 데이터 연동 (balance, escrow, updatedAt)\n- 실시간 잔액 업데이트 기능 구현\n- 데이터 로딩 및 오류 상태 처리",
            "status": "pending",
            "testStrategy": "1) 잔액/에스크로/누적 수치 정확성 및 실시간 반영\n2) 버튼(충전/출금/내역/연동) 라우팅/권한 체크\n3) 최근 트랜잭션 페이징/스켈레톤/에러 상태\n4) 데이터 로딩/오류 처리/오프라인 캐시"
          },
          {
            "id": 4,
            "title": "충전 및 출금 프로세스 개발",
            "description": "사용자가 계좌에 충전하고 출금할 수 있는 프로세스를 개발합니다. PG/계좌이체/타자페이 연동, 본인 계좌 인증 및 출금 프로세스를 구현합니다.",
            "dependencies": [
              "18.3"
            ],
            "details": "- 충전 화면 UI 및 프로세스 구현\n- PG/계좌이체/타자페이 결제 방식 연동\n- 본인 계좌 인증 프로세스 구현\n- 출금 화면 UI 및 프로세스 구현 (T+1 정산)\n- 최소 잔액 및 수수료 테이블 표시\n- 충전/출금 트랜잭션 처리 및 상태 관리\n- 오류 처리 및 사용자 안내 메시지 구현\n- 보안 검증 및 이중 인증 프로세스 구현",
            "status": "pending",
            "testStrategy": "1) PG/계좌이체/타자페이 결제 성공/실패/취소\n2) 본인 인증/출금 계좌 검증/정산(T+1) 상태\n3) 수수료 테이블/최소잔액 규칙 검증\n4) 이중 제출 방지/네트워크 재시도 정책"
          },
          {
            "id": 5,
            "title": "트랜잭션 내역 및 데이터 연동 구현",
            "description": "사용자의 트랜잭션 내역을 표시하고 관련 데이터를 연동하는 기능을 구현합니다. 페이지네이션, CSV 내보내기, 트랜잭션 상세 정보 표시 기능을 포함합니다.",
            "dependencies": [
              "18.3",
              "18.4"
            ],
            "details": "- 트랜잭션 내역 화면 UI 구현\n- wallet_transactions 페이지네이션 구현\n- 트랜잭션 타입별 필터링 기능 개발\n- CSV 내보내기 기능 구현\n- 트랜잭션 상세 정보 표시 화면 개발\n- wallet_transactions/{uid}/items 데이터 연동 (type, amount, fee, postId, storeId, ts, status)\n- 트랜잭션 상태 업데이트 및 실시간 반영\n- 데이터 캐싱 및 오프라인 지원 구현",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 19,
        "title": "위치 검증 및 보안 기능 구현",
        "description": "위치 기반 검증 및 보안 관련 기능 개발. GPS, 기지국, WiFi 기반 위치 검증, 스푸핑 감지 등 포함.",
        "details": "1. 다중 위치 검증 시스템 구현:\n   - GPS 기반 위치 확인 (정밀도 우선)\n   - 기지국 기반 위치 검증 (보조 검증)\n   - WiFi 기반 위치 검증 (사용자 등록 필요)\n   - 위치 데이터 융합 및 신뢰도 점수 계산\n\n2. 위치 스푸핑 감지 기능 구현:\n   - 속도/드리프트/루트 불연속성 감지 로직\n   - 모의 위치 앱 감지 기능\n   - 위치 이상 패턴 분석 및 경고\n\n3. 보안 강화 기능 구현:\n   - Firebase Rules 최소화 원칙 적용\n   - 서버단 권한 검증 로직 구현\n   - 리플레이 공격 방지 메커니즘 구현\n\n4. 위치 권한 관리 기능:\n   - 위치 권한 요청 및 상태 관리\n   - 권한 거부 시 설정 유도 스낵바 표시\n   - 백그라운드 위치 권한 관리\n\n5. Cloud Functions 구현:\n   - verifyLocation(): GPS+Cell+WiFi 다중 점검 및 리스크 스코어 계산\n   - claimPost(): 위치검증→소유 이전→쿠폰 사용 플래그 설정\n   - redeemCoupon(): 스토어 점검→정산 트리거(지갑/수수료 반영)",
        "testStrategy": "1. 다중 위치 검증 테스트:\n   - GPS, 기지국, WiFi 각 검증 방식 정확성 확인\n   - 융합 알고리즘 및 신뢰도 점수 검증\n   - 다양한 환경(실내/실외/혼잡지역)에서 테스트\n\n2. 스푸핑 감지 테스트:\n   - 모의 위치 앱 사용 시 감지 정확성 확인\n   - 이상 패턴 감지 알고리즘 검증\n   - 오탐지율(false positive) 측정\n\n3. 보안 기능 테스트:\n   - Firebase Rules 적용 및 권한 검증 확인\n   - 서버단 검증 우회 시도 테스트\n   - 리플레이 공격 방어 검증\n\n4. 위치 권한 관리 테스트:\n   - 권한 요청 UI 및 사용자 경험 확인\n   - 권한 거부 시 대체 흐름 검증\n   - 백그라운드 위치 추적 정확성 확인\n\n5. Cloud Functions 테스트:\n   - 함수 호출 및 응답 정확성 확인\n   - 오류 처리 및 재시도 메커니즘 검증\n   - 성능 및 지연 시간 측정",
        "priority": "high",
        "dependencies": [
          13,
          14,
          15
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "다중 위치 검증 시스템 설계 및 구현",
            "description": "GPS, 기지국, WiFi 기반 위치 검증 시스템을 설계하고 구현합니다. 각 데이터 소스의 정확도와 신뢰도를 평가하여 융합 알고리즘을 개발합니다.",
            "dependencies": [],
            "details": "- GPS 기반 위치 확인 모듈 구현 (정밀도 우선)\n- 기지국 기반 위치 검증 모듈 구현 (보조 검증)\n- WiFi 기반 위치 검증 모듈 구현 (사용자 등록 필요)\n- 위치 데이터 융합 알고리즘 개발\n- 신뢰도 점수 계산 로직 구현\n- 위치 데이터 캐싱 및 업데이트 메커니즘 구현\n- 다양한 환경(실내/실외/혼잡지역)에서 테스트 시나리오 작성",
            "status": "pending",
            "testStrategy": "1) 타입 필터/정렬/검색 정확성\n2) CSV 내보내기 포맷/로케일/엑셀 호환성\n3) 상세 화면 라우팅/필드 표시 정확성\n4) 실시간 반영/캐싱/오프라인 처리"
            "status": "pending",
            "testStrategy": "1) 각 소스(GPS/Cell/WiFi) 정확도/신뢰도 산출 검증\n2) 융합 알고리즘 가중치/결과 일관성 테스트\n3) 캐싱/업데이트 주기/배터리 영향 측정\n4) 실내/실외/혼잡 지역 시나리오"
          },
          {
            "id": 2,
            "title": "위치 스푸핑 감지 알고리즘 개발",
            "description": "위치 스푸핑을 감지하기 위한 알고리즘을 개발합니다. 속도, 드리프트, 루트 불연속성 등을 분석하여 비정상적인 위치 변경을 감지합니다.",
            "dependencies": [
              "19.1"
            ],
            "details": "- 속도/드리프트/루트 불연속성 감지 로직 구현\n- 모의 위치 앱 감지 기능 개발\n- 위치 이상 패턴 분석 알고리즘 구현\n- 경고 시스템 및 위험도 평가 로직 개발\n- 오탐지율(false positive) 최소화 전략 수립\n- 스푸핑 감지 시 대응 메커니즘 구현\n- 다양한 스푸핑 시나리오에 대한 테스트 케이스 작성",
            "status": "pending",
            "testStrategy": "1) 속도/드리프트/루트 단절 패턴 감지율/오탐율\n2) 모의 위치 앱/개발자옵션 시나리오 차단\n3) 경고/차단 UX/로그/알림 정책 확인\n4) 다양한 샘플링 주기/노이즈 환경 테스트"
          },
          {
            "id": 3,
            "title": "Firebase 보안 규칙 및 서버 측 검증 구현",
            "description": "Firebase 보안 규칙을 최소 권한 원칙에 따라 구성하고, 서버 측 검증 로직을 구현하여 클라이언트 우회 공격을 방지합니다.",
            "dependencies": [
              "19.1",
              "19.2"
            ],
            "details": "- Firebase Rules 최소화 원칙 적용 및 문서화\n- 서버단 권한 검증 로직 구현\n- 리플레이 공격 방지 메커니즘 구현\n- 토큰 기반 인증 및 권한 검증 시스템 구현\n- 요청 유효성 검사 미들웨어 개발\n- 보안 위협 모델 문서화 및 대응 전략 수립\n- 침투 테스트 시나리오 작성 및 실행",
            "status": "pending",
            "testStrategy": "1) Rules 최소 권한 검증(읽기/쓰기 케이스)\n2) 서버 권한 검증/리플레이 방지 유닛/통합 테스트\n3) 토큰 만료/서명 위조 시도 차단 확인\n4) 침투 시나리오/부하 테스트"
          },
          {
            "id": 4,
            "title": "위치 권한 관리 및 사용자 경험 최적화",
            "description": "위치 권한 요청 및 관리 기능을 구현하고, 사용자 경험을 최적화합니다. 권한 거부 시 적절한 안내와 대응 방안을 제공합니다.",
            "dependencies": [
              "19.1"
            ],
            "details": "- 위치 권한 요청 및 상태 관리 시스템 구현\n- 권한 거부 시 설정 유도 스낵바 표시 기능\n- 백그라운드 위치 권한 관리 로직 개발\n- 플랫폼별(iOS/Android) 권한 요청 최적화\n- 위치 서비스 비활성화 상태 감지 및 대응\n- 사용자 친화적인 권한 요청 메시지 설계\n- 위치 권한 관련 사용자 경험 테스트 시나리오 작성",
            "status": "pending",
            "testStrategy": "1) 권한 최초 요청/거부/재요청/영구거부 플로우\n2) 백그라운드 권한 플랫폼별(iOS/Android) 차이 검증\n3) 서비스 비활성/오류 상태 감지 및 스낵바 유도\n4) UX 카피/접근성 점검"
          },
          {
            "id": 5,
            "title": "Cloud Functions 개발 및 배포",
            "description": "위치 검증, 포스트 소유권 이전, 쿠폰 사용 등의 기능을 수행하는 Cloud Functions를 개발하고 배포합니다.",
            "dependencies": [
              "19.1",
              "19.2",
              "19.3"
            ],
            "details": "- verifyLocation() 함수 개발: GPS+Cell+WiFi 다중 점검 및 리스크 스코어 계산\n- claimPost() 함수 개발: 위치검증→소유 이전→쿠폰 사용 플래그 설정\n- redeemCoupon() 함수 개발: 스토어 점검→정산 트리거(지갑/수수료 반영)\n- 함수 성능 최적화 및 오류 처리 구현\n- 로깅 및 모니터링 시스템 통합\n- 스테이징 환경에서 테스트 및 검증\n- 프로덕션 환경 배포 및 롤백 전략 수립",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 20,
        "title": "데이터 모델 및 성능 최적화 구현",
        "description": "Firestore 데이터 모델 설계 및 성능 최적화 작업. 인덱싱, 캐싱, 로깅 등 포함.",
        "details": "1. Firestore 데이터 모델 구현:\n   - users/{uid}: 프로필, 성별, 생년월일, 주소, 설정, 인증 정보\n   - user_posts/{uid}/{postId}: 원본/초안, 에셋 링크, 조건 서명\n   - posts/{postId}: 공개 메타(타입, 소멸, 타겟, storeId, 전달/응답 가능 여부)\n   - map_markers/{markerId}: 위치, 포스트ID, 반경, 클러스터 서명, 활성 상태\n   - stores/{storeId}: 이름, 설명, 주소, 위치, 인증 상태, 카테고리\n   - store_staff/{id}: 스토어ID, 사용자ID, 역할, 인증 방법\n   - received_posts/{uid}/{postId}: 상태, 수신 시간, 홉 수\n   - message_threads/{threadId} + messages: 메시지 쓰레드 및 내용\n   - wallets/{uid} + wallet_transactions: 지갑 및 트랜잭션 정보\n   - verifications/{uid}: 이메일/SMS/WiFi/위치 인증 상태\n\n2. 인덱스 설정 구현:\n   - posts: type+expireAt, geo+active, target.gender+target.ageRange\n   - map_markers: geo+active, postId\n   - received_posts: uid+status, receivedAt desc\n\n3. 성능 최적화 구현:\n   - 마커 가상화(클러스터링 라이브러리) 적용\n   - 한 뷰포트 500개 제한 설정\n   - 60fps 목표 렌더링 최적화\n   - 이미지 썸네일 및 캐싱 전략 구현\n   - 네트워크 타임아웃 10초 설정\n\n4. 로깅 및 분석 구현:\n   - BigQuery(또는 GA4) 이벤트 스트림 연동\n   - 개인정보 비식별화 처리\n   - 주요 이벤트 로깅: search_submit, search_auto_suggest_click, tap_wallet, tap_settings, map_view, marker_cluster_expand, filter_apply, post_claim_attempt, deploy_menu_open, deploy_route_select, store_view, staff_verify_success/fail",
        "testStrategy": "1. 데이터 모델 테스트:\n   - CRUD 작업 정확성 확인\n   - 관계 및 참조 무결성 검증\n   - 권한 및 보안 규칙 검증\n\n2. 인덱스 성능 테스트:\n   - 쿼리 실행 시간 측정\n   - 인덱스 적용 전/후 성능 비교\n   - 대량 데이터 환경에서 성능 검증\n\n3. 성능 최적화 테스트:\n   - 렌더링 성능 측정 (FPS 모니터링)\n   - 메모리 사용량 및 누수 검사\n   - 네트워크 요청 최적화 확인\n   - 다양한 기기 및 네트워크 환경에서 테스트\n\n4. 로깅 및 분석 테스트:\n   - 이벤트 전송 정확성 확인\n   - 비식별화 처리 검증\n   - 분석 대시보드 데이터 정확성 확인",
        "priority": "medium",
        "dependencies": [
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Firestore 데이터 모델 설계 및 구현",
            "description": "Firestore 데이터베이스의 컬렉션 및 문서 구조 설계와 구현",
            "dependencies": [],
            "details": "1. 다음 컬렉션 스키마 상세 설계 및 구현:\n   - users/{uid}: 사용자 프로필, 인증 정보, 설정 등\n   - user_posts/{uid}/{postId}: 사용자별 포스트 정보 및 초안\n   - posts/{postId}: 공개 포스트 메타데이터\n   - map_markers/{markerId}: 지도 마커 정보\n   - stores/{storeId}: 스토어 정보\n   - store_staff/{id}: 스토어 직원 정보\n   - received_posts/{uid}/{postId}: 수신된 포스트 정보\n   - message_threads/{threadId} + messages: 메시지 관련 정보\n   - wallets/{uid} + wallet_transactions: 지갑 및 거래 정보\n   - verifications/{uid}: 사용자 인증 상태 정보\n2. 각 컬렉션별 필드 타입 및 제약조건 정의\n3. 문서 간 관계 및 참조 구조 설계\n4. 보안 규칙 설정 및 접근 권한 구현",
            "status": "pending",
            "testStrategy": "1) verifyLocation/claimPost/redeemCoupon 유닛/통합 테스트\n2) 로깅/모니터링/알람 연동 검증\n3) 성능/콜드스타트/타임아웃/재시도 정책 확인\n4) 스테이징/프로덕션 배포/롤백 절차 검증"
            "status": "pending",
            "testStrategy": "1) 각 컬렉션 CRUD 및 제약조건 유효성 테스트\n2) 참조/관계 무결성/캐스케이딩 동작 검증\n3) 보안 규칙과 접근 권한 시나리오 테스트\n4) 마이그레이션/시드 데이터 절차 검증"
          },
          {
            "id": 2,
            "title": "인덱스 설정 및 쿼리 최적화",
            "description": "Firestore 인덱스 설정 및 효율적인 쿼리 구현",
            "dependencies": [
              "20.1"
            ],
            "details": "1. 다음 인덱스 설정 구현:\n   - posts: type+expireAt, geo+active, target.gender+target.ageRange\n   - map_markers: geo+active, postId\n   - received_posts: uid+status, receivedAt desc\n2. 복합 쿼리를 위한 추가 인덱스 설계 및 구현\n3. 쿼리 성능 테스트 및 최적화:\n   - 실행 시간 측정\n   - 읽기/쓰기 비용 분석\n   - 인덱스 적용 전/후 성능 비교\n4. 페이지네이션 및 커서 기반 쿼리 구현\n5. 대량 데이터 환경에서 쿼리 성능 검증",
            "status": "pending",
            "testStrategy": "1) 인덱스 생성/전파 대기 및 쿼리 실패 핸들링\n2) 전/후 성능 비교(지연/읽기량/비용) 리포트\n3) 페이지네이션/커서 정확성/경계값 검증\n4) 대량 데이터 샘플에서 타임아웃/스캔 방지"
          },
          {
            "id": 3,
            "title": "성능 최적화 전략 구현",
            "description": "애플리케이션 성능 최적화를 위한 다양한 전략 구현",
            "dependencies": [
              "20.1",
              "20.2"
            ],
            "details": "1. 마커 가상화 및 클러스터링 구현:\n   - 클러스터링 라이브러리 적용\n   - 한 뷰포트 내 마커 500개 제한 설정\n   - 동적 마커 로딩 구현\n2. 렌더링 최적화:\n   - 60fps 목표 성능 구현\n   - 컴포넌트 메모이제이션 적용\n   - 렌더링 프로파일링 및 병목 해결\n3. 이미지 최적화:\n   - 썸네일 생성 및 관리 시스템 구현\n   - 이미지 캐싱 전략 구현\n   - 지연 로딩 적용\n4. 네트워크 최적화:\n   - 타임아웃 10초 설정\n   - 오프라인 지원 구현\n   - 데이터 프리페칭 전략 구현",
            "status": "pending",
            "testStrategy": "1) 클러스터링/가상화 도입 전후 FPS/메모리 비교\n2) 주요 화면 렌더링 프로파일링/병목 제거 확인\n3) 이미지 썸네일/캐시/지연 로딩 효과 측정\n4) 네트워크 타임아웃/오프라인/프리페치 효과"
          },
          {
            "id": 4,
            "title": "로깅 및 분석 시스템 구축",
            "description": "사용자 행동 및 시스템 성능 분석을 위한 로깅 시스템 구현",
            "dependencies": [
              "20.1",
              "20.3"
            ],
            "details": "1. BigQuery(또는 GA4) 이벤트 스트림 연동 구현\n2. 개인정보 비식별화 처리 로직 구현\n3. 주요 이벤트 로깅 구현:\n   - search_submit, search_auto_suggest_click\n   - tap_wallet, tap_settings\n   - map_view, marker_cluster_expand\n   - filter_apply, post_claim_attempt\n   - deploy_menu_open, deploy_route_select\n   - store_view, staff_verify_success/fail\n4. 로그 데이터 분석 대시보드 설계\n5. 성능 메트릭 수집 및 모니터링 시스템 구현\n6. A/B 테스트 프레임워크 통합",
            "status": "pending",
            "testStrategy": "1) 이벤트 스키마/비식별화 적용/누락 여부 검증\n2) 스트림 전송 신뢰성/중복 방지/백프레셔 처리\n3) 대시보드 지표 일치성/지연 시간 확인\n4) 성능 메트릭/알림 임계치 설정 테스트"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-23T09:30:49.152Z",
      "updated": "2025-08-23T12:01:06.772Z",
      "description": "Tasks for master context"
    }
  }
}