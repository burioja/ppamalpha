import 'package:flutter/material.dart';
import '../../../core/models/post/post_model.dart';
import '../../../../widgets/network_image_fallback_web.dart' if (dart.library.io) '../../../../widgets/network_image_fallback_stub.dart';
import 'package:intl/intl.dart';

class PostTileCard extends StatefulWidget {
  final PostModel post;
  final VoidCallback? onTap;
  final VoidCallback? onDoubleTap;
  final bool isSelected;
  final bool showDeleteButton;
  final VoidCallback? onDelete;
  final bool showStatisticsButton;
  final VoidCallback? onStatistics;

  const PostTileCard({
    super.key,
    required this.post,
    this.onTap,
    this.onDoubleTap,
    this.isSelected = false,
    this.showDeleteButton = false,
    this.onDelete,
    this.showStatisticsButton = false,
    this.onStatistics,
  });

  @override
  State<PostTileCard> createState() => _PostTileCardState();
}

class _PostTileCardState extends State<PostTileCard> with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  DateTime? _lastTapTime;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 0.95).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _handleTap() {
    // ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÎ©¥ ÏÑ†ÌÉùÎßå ÌïòÍ≥† (1Î≤à ÌÉ≠)
    // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú ÏÉÅÌÉúÎ©¥ onTap Ìò∏Ï∂ú (2Î≤à ÌÉ≠)
    if (!widget.isSelected) {
      // 1Î≤à ÌÉ≠: ÏÑ†ÌÉùÎßå ÌïòÍ∏∞
      if (widget.onTap != null) {
        widget.onTap!();
      }
    } else {
      // 2Î≤à ÌÉ≠: Ìè¨Ïä§Ìä∏ ÏÉÅÏÑ∏Î°ú Ïù¥Îèô
      _animationController.forward().then((_) {
        _animationController.reverse();
      });
      if (widget.onDoubleTap != null) {
        widget.onDoubleTap!();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    try {
      // ÎîîÎ≤ÑÍ∑∏: Ìè¨Ïä§Ìä∏ ÏÉÅÌÉú Î°úÍπÖ
      debugPrint('üîç PostTileCard - postId: ${widget.post.postId}, title: ${widget.post.title}');
      debugPrint('   status: ${widget.post.status.name} (${widget.post.status})');

      final isDeleted = widget.post.status == PostStatus.DELETED;
      // üöÄ Ï†úÍ±∞Îêú ÌïÑÎìúÎì§: isCollected, isUsed, isUsedByCurrentUser
      // Ïù¥Îì§ÏùÄ Ïù¥Ï†ú post_collections Ïª¨Î†âÏÖòÏóêÏÑú ÏøºÎ¶¨Ìï¥Ïïº Ìï®
      final isCollected = false; // TODO: ÏøºÎ¶¨ Í∏∞Î∞òÏúºÎ°ú Î≥ÄÍ≤Ω ÌïÑÏöî
      final isUsed = false; // TODO: ÏøºÎ¶¨ Í∏∞Î∞òÏúºÎ°ú Î≥ÄÍ≤Ω ÌïÑÏöî

      debugPrint('   isDeleted: $isDeleted, isCollected: $isCollected, isUsed: $isUsed');

      return GestureDetector(
        onTap: _handleTap,
        child: AnimatedBuilder(
          animation: _scaleAnimation,
          builder: (context, child) => Transform.scale(
            scale: _scaleAnimation.value,
            child: Container(
        decoration: BoxDecoration(
          color: isUsed
              ? Colors.grey.shade100
              : widget.isSelected
                  ? const Color(0xFF4D4DFF).withValues(alpha: 0.1)
                  : Colors.white,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isUsed
                ? Colors.grey.shade400
                : widget.isSelected
                    ? const Color(0xFF4D4DFF)
                    : Colors.grey.shade300,
            width: widget.isSelected ? 2 : 1,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: isUsed ? 0.02 : 0.05),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Ïù¥ÎØ∏ÏßÄ ÏòÅÏó≠
            Expanded(
              flex: 3,
              child: Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: const BorderRadius.vertical(
                    top: Radius.circular(12),
                  ),
                ),
                child: Stack(
                  children: [
                    // Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
                    ClipRRect(
                      borderRadius: const BorderRadius.vertical(
                        top: Radius.circular(12),
                      ),
                      child: _buildImageWidget(),
                    ),
                    // ÏÉÅÌÉú Î∞∞ÏßÄ (Ïö∞ÏÉÅÎã®)
                    Positioned(
                      top: 8,
                      right: 8,
                      child: _buildStatusBadge(isDeleted, isCollected, isUsed),
                    ),
                    // ÏÇ≠Ï†ú Î≤ÑÌäº (Ï¢åÏÉÅÎã®)
                    if (widget.showDeleteButton && widget.onDelete != null)
                      Positioned(
                        top: 8,
                        left: 8,
                        child: GestureDetector(
                          onTap: widget.onDelete,
                          child: Container(
                            padding: const EdgeInsets.all(4),
                            decoration: BoxDecoration(
                              color: Colors.red.withValues(alpha: 0.8),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: const Icon(
                              Icons.delete,
                              size: 16,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    // ÏÇ¨Ïö©Îêú Ìè¨Ïä§Ìä∏ Ïò§Î≤ÑÎ†àÏù¥
                    if (isUsed)
                      Positioned.fill(
                        child: Container(
                          decoration: BoxDecoration(
                            color: Colors.grey.withValues(alpha: 0.6),
                            borderRadius: const BorderRadius.vertical(
                              top: Radius.circular(12),
                            ),
                          ),
                          child: const Center(
                            child: Icon(
                              Icons.check_circle,
                              size: 40,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            // ÎÇ¥Ïö© ÏòÅÏó≠
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.fromLTRB(12, 8, 12, 8),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    // Ï†úÎ™© (ÏÑ†ÌÉù Ïãú Ïä§ÌÅ¨Î°§ Ïï†ÎãàÎ©îÏù¥ÏÖò)
                    widget.isSelected
                        ? SizedBox(
                            height: 32,
                            child: _ScrollingText(
                              text: widget.post.title.isNotEmpty ? widget.post.title : '(Ï†úÎ™© ÏóÜÏùå)',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                                color: isUsed ? Colors.grey.shade600 : Colors.black87,
                                decoration: isUsed ? TextDecoration.lineThrough : TextDecoration.none,
                              ),
                            ),
                          )
                        : Flexible(
                            child: Text(
                              widget.post.title.isNotEmpty ? widget.post.title : '(Ï†úÎ™© ÏóÜÏùå)',
                              style: TextStyle(
                                fontSize: 14,
                                fontWeight: FontWeight.w600,
                                color: isUsed ? Colors.grey.shade600 : Colors.black87,
                                decoration: isUsed ? TextDecoration.lineThrough : TextDecoration.none,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                    const SizedBox(height: 4),
                    // ÌïòÎã® Ï†ïÎ≥¥ (Î¶¨ÏõåÎìú, ÌÜµÍ≥ÑÎ≤ÑÌäº/Î∞∞Ìè¨Ïùº)
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // Î¶¨ÏõåÎìú
                        Flexible(
                          flex: 2,
                          child: Text(
                            isUsed ? 'ÏÇ¨Ïö©ÏôÑÎ£å' : '‚Ç©${NumberFormat('#,###').format(widget.post.reward)}',
                            style: TextStyle(
                              fontSize: 12,
                              color: isUsed ? Colors.grey.shade600 : const Color(0xFF4D4DFF),
                              fontWeight: FontWeight.w600,
                            ),
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        const SizedBox(width: 4),
                        // ÌÜµÍ≥Ñ Î≤ÑÌäºÍ≥º Î∞∞Ìè¨Ïùº
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: [
                            // ÌÜµÍ≥Ñ Î≤ÑÌäº (Î∞∞Ìè¨Îêú Ìè¨Ïä§Ìä∏Îßå)
                            if (widget.showStatisticsButton && widget.post.isDeployed && widget.onStatistics != null)
                              GestureDetector(
                                onTap: widget.onStatistics,
                                child: Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 3),
                                  decoration: BoxDecoration(
                                    color: const Color(0xFF4D4DFF).withValues(alpha: 0.9),
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  child: const Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Icon(
                                        Icons.analytics,
                                        size: 12,
                                        color: Colors.white,
                                      ),
                                      SizedBox(width: 3),
                                      Text(
                                        'ÌÜµÍ≥Ñ',
                                        style: TextStyle(
                                          fontSize: 10,
                                          fontWeight: FontWeight.w600,
                                          color: Colors.white,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            if (widget.showStatisticsButton && widget.post.isDeployed && widget.onStatistics != null)
                              const SizedBox(height: 2),
                            // Î∞∞Ìè¨Ïùº (Î∞∞Ìè¨Îêú Ìè¨Ïä§Ìä∏Îßå ÌëúÏãú)
                            if (widget.post.isDeployed)
                              Text(
                                DateFormat('MM/dd').format(widget.post.createdAt),
                                style: TextStyle(
                                  fontSize: 10,
                                  color: Colors.grey.shade600,
                                ),
                              ),
                          ],
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
          ),
        ),
      );
    } catch (e, stackTrace) {
      debugPrint('‚ùå PostTileCard ÎπåÎìú ÏóêÎü¨: $e');
      debugPrint('Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§: $stackTrace');
      debugPrint('Ìè¨Ïä§Ìä∏ Ï†ïÎ≥¥: postId=${widget.post.postId}, title=${widget.post.title}');

      // ÏóêÎü¨ Î∞úÏÉù Ïãú Í∞ÑÎã®Ìïú ÏóêÎü¨ Ïπ¥Îìú ÌëúÏãú
      return Container(
        margin: const EdgeInsets.all(8),
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.red.shade50,
          border: Border.all(color: Colors.red.shade300),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.error_outline, color: Colors.red.shade700, size: 20),
                const SizedBox(width: 8),
                Text(
                  'Ìè¨Ïä§Ìä∏ Î°úÎìú Ïò§Î•ò',
                  style: TextStyle(
                    color: Colors.red.shade700,
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              'ID: ${widget.post.postId}',
              style: TextStyle(fontSize: 12, color: Colors.grey.shade700),
            ),
            Text(
              'Ï†úÎ™©: ${widget.post.title}',
              style: TextStyle(fontSize: 12, color: Colors.grey.shade700),
            ),
            const SizedBox(height: 4),
            Text(
              'ÏóêÎü¨: $e',
              style: TextStyle(fontSize: 11, color: Colors.red.shade600),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      );
    }
  }

  Widget _buildImageWidget() {
    try {
      // Ïç∏ÎÑ§Ïùº Ïö∞ÏÑ† ÏÇ¨Ïö©
      final imageUrl = widget.post.thumbnailUrl.isNotEmpty
          ? widget.post.thumbnailUrl.first
          : (widget.post.mediaUrl.isNotEmpty ? widget.post.mediaUrl.first : '');

      if (imageUrl.isNotEmpty) {
        // Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖ Ï≤¥ÌÅ¨Î•º Îçî Í¥ÄÎåÄÌïòÍ≤å Î≥ÄÍ≤Ω
        bool hasImageMedia = widget.post.mediaType.isNotEmpty &&
            (widget.post.mediaType.any((type) => type.toLowerCase().contains('image')) ||
             imageUrl.toLowerCase().contains('.jpg') ||
             imageUrl.toLowerCase().contains('.jpeg') ||
             imageUrl.toLowerCase().contains('.png') ||
             imageUrl.toLowerCase().contains('.gif') ||
             imageUrl.toLowerCase().contains('firebasestorage'));

        if (hasImageMedia) {
          return ClipRRect(
            borderRadius: const BorderRadius.vertical(
              top: Radius.circular(12),
            ),
            child: SizedBox(
              width: double.infinity,
              height: double.infinity,
              child: buildNetworkImage(imageUrl),
            ),
          );
        }
      }
    } catch (e) {
      debugPrint('‚ùå Ïù¥ÎØ∏ÏßÄ ÏúÑÏ†Ø ÎπåÎìú ÏóêÎü¨: $e');
    }

    // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ÏßÄ ÌÉÄÏûÖÏù¥ ÏïÑÎãå Í≤ΩÏö∞ Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò ÌëúÏãú
    return Center(
      child: Icon(
        Icons.image,
        size: 32,
        color: Colors.grey.shade400,
      ),
    );
  }

  Widget _buildStatusBadge(bool isDeleted, bool isCollected, bool isUsed) {
    debugPrint('üìõ _buildStatusBadge Ìò∏Ï∂ú');
    debugPrint('   postId: ${widget.post.postId}');
    debugPrint('   status: ${widget.post.status.name}');
    debugPrint('   isDeleted: $isDeleted');
    debugPrint('   isCollected: $isCollected');
    debugPrint('   isUsed: $isUsed');

    // ÏÇ¨Ïö© ÏÉÅÌÉúÍ∞Ä ÏµúÏö∞ÏÑ†
    if (isUsed) {
      debugPrint('   ‚úÖ Î∞∞ÏßÄ: ÏÇ¨Ïö©Îê®');

      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.grey.shade700,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text(
          'ÏÇ¨Ïö©Îê®',
          style: TextStyle(
            fontSize: 10,
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      );
    }

    // RECALLED ÏÉÅÌÉú - ÌöåÏàòÎêú Ìè¨Ïä§Ìä∏ (DELETEDÎ≥¥Îã§ Î®ºÏ†Ä Ï≤¥ÌÅ¨!)
    if (widget.post.status == PostStatus.RECALLED) {
      debugPrint('   ‚úÖ Î∞∞ÏßÄ: ÌöåÏàòÎê®');
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.orange,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text(
          'ÌöåÏàòÎê®',
          style: TextStyle(
            fontSize: 10,
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      );
    }

    // ÏÇ≠Ï†úÎêú ÏÉÅÌÉú
    if (isDeleted) {
      debugPrint('   ‚úÖ Î∞∞ÏßÄ: ÏÇ≠Ï†ú');
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.red,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text(
          'ÏÇ≠Ï†ú',
          style: TextStyle(
            fontSize: 10,
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      );
    }

    if (isCollected) {
      debugPrint('   ‚úÖ Î∞∞ÏßÄ: ÏàòÏßëÎê®');
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
        decoration: BoxDecoration(
          color: Colors.green,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text(
          'ÏàòÏßëÎê®',
          style: TextStyle(
            fontSize: 10,
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      );
    }

    // DEPLOYED ÏÉÅÌÉúÎ©¥ Î∞∞ÏßÄ Ïà®ÍπÄ (Î∞∞Ìè¨Îêú Ìè¨Ïä§Ìä∏ ÌÉ≠ÏóêÏÑúÎäî Î™®Îì† Ìè¨Ïä§Ìä∏Í∞Ä DEPLOYEDÏù¥ÎØÄÎ°ú Ï§ëÎ≥µ Ï†ïÎ≥¥)
    if (widget.post.status == PostStatus.DEPLOYED) {
      debugPrint('   ‚ö™ Î∞∞ÏßÄ Ïà®ÍπÄ: DEPLOYED');
      return const SizedBox.shrink();
    }

    // DRAFT ÏÉÅÌÉú - "ÏûëÏÑ±Ï§ë" Î∞∞ÏßÄ Ïà®ÍπÄ Ï≤òÎ¶¨
    if (widget.post.status == PostStatus.DRAFT) {
      debugPrint('   ‚ö™ Î∞∞ÏßÄ Ïà®ÍπÄ: DRAFT');
      return const SizedBox.shrink();
    }

    // Í∏∞ÌÉÄ ÏÉÅÌÉúÎäî Î∞∞ÏßÄ ÌëúÏãú Ïïà Ìï®
    debugPrint('   ‚ö™ Î∞∞ÏßÄ Ïà®ÍπÄ: Í∏∞ÌÉÄ ÏÉÅÌÉú');
    return const SizedBox.shrink();
  }
}

/// Ï¢åÏö∞ Ïä§ÌÅ¨Î°§ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÖçÏä§Ìä∏ ÏúÑÏ†Ø
class _ScrollingText extends StatefulWidget {
  final String text;
  final TextStyle style;

  const _ScrollingText({
    required this.text,
    required this.style,
  });

  @override
  State<_ScrollingText> createState() => _ScrollingTextState();
}

class _ScrollingTextState extends State<_ScrollingText> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _animation;
  late ScrollController _scrollController;

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _controller = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );

    // Ï¢åÏö∞ Î∞òÎ≥µ Ïï†ÎãàÎ©îÏù¥ÏÖò
    _animation = Tween<Offset>(
      begin: Offset.zero,
      end: const Offset(-1.0, 0.0),
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.linear,
    ));

    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ClipRect(
      child: SlideTransition(
        position: _animation,
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(widget.text, style: widget.style),
            const SizedBox(width: 20),
            Text(widget.text, style: widget.style),
          ],
        ),
      ),
    );
  }
}