        point,
      );
      if (distanceToWork <= maxRadius) {
        return true;
      }
    }
    
    return false;
  }

  // 🚀 포그레벨 확인 후 롱프레스 메뉴 표시
  Future<void> _checkFogLevelAndShowMenu(LatLng point) async {
    try {
      // 해당 위치의 포그레벨 확인
      final tileId = TileUtils.getTileId(point.latitude, point.longitude);
      
      print('🔍 포그레벨 확인 시작:');
      print('  - 롱프레스 위치: ${point.latitude}, ${point.longitude}');
      print('  - 현재 위치: ${_currentPosition?.latitude}, ${_currentPosition?.longitude}');
      print('  - 타일 ID: $tileId');
      
      final fogLevel = await VisitTileService.getFogLevelForTile(tileId);
      
      print('🔍 롱프레스 위치 포그레벨: $fogLevel (타일: $tileId)');
      
      if (fogLevel == 1) {
        // 포그레벨 1단계: 배포 가능
        print('✅ 포그레벨 1단계 - 정상 배포 메뉴 표시');
        _showLongPressMenu();
      } else if (fogLevel == 2) {
        // 포그레벨 2단계: 회색 영역 - 제한된 배포
        print('⚠️ 포그레벨 2단계 - 제한된 배포 메뉴 표시');
        _showRestrictedLongPressMenu();
      } else {
        // 포그레벨 3단계: 검은 영역 - 배포 불가
        print('🚫 포그레벨 3단계 - 배포 불가 메뉴 표시');
        _showBlockedLongPressMessage();
      }
      
    } catch (e) {
      print('❌ 포그레벨 확인 실패: $e');
      // 오류 시 기본 메뉴 표시
      print('🔄 오류로 인해 기본 배포 메뉴 표시');
      _showLongPressMenu();
    }
  }

  // 제한된 배포 메뉴 표시
  void _showRestrictedLongPressMenu() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('⚠️ 제한된 영역'),
          content: const Text(
            '이 영역은 회색 영역입니다.\n'
            '포스트 배포가 제한됩니다.\n\n'
            '집, 가게, 현재 위치 주변의 밝은 영역에서만 배포가 가능합니다.',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('확인'),
            ),
          ],
        );
      },
    );
  }

  // 배포 불가 메시지 표시
  void _showBlockedLongPressMessage() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('🚫 배포 불가'),
          content: const Text(
            '이 영역은 검은 영역입니다.\n'
            '포스트 배포가 불가능합니다.\n\n'
            '집, 가게, 현재 위치 주변의 밝은 영역에서만 배포가 가능합니다.',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('확인'),
            ),
          ],
        );
      },
    );
  }

  // 포그레벨 업데이트 메서드
  Future<void> _updateFogOfWar() async {
    if (_currentPosition == null) return;
    
    try {
      // OSM 기반 포그레벨 업데이트
      await _updateOSMFogOfWar();
    } catch (e) {
      print('포그레벨 업데이트 실패: $e');
    }
  }

  // OSM 기반 포그레벨 업데이트
  Future<void> _updateOSMFogOfWar() async {
    if (_currentPosition == null) return;

    try {
      // OSM 포그 서비스 사용
      final osmFogService = OSMFogService();
      await osmFogService.updateFogOfWar(_currentPosition!);

      // 포그레벨 업데이트 후 UI 갱신
      setState(() {
        // 포그레벨 상태 업데이트 (실제 구현에 따라 조정)
      });
    } catch (e) {
      print('OSM 포그레벨 업데이트 실패: $e');
    }
  }

  // 마커 상세 정보 표시
  void _showMarkerDetails(MarkerModel marker) async {
    // 🔍 마커 탭 시 데이터 확인
    print('[MARKER_TAP_DEBUG] 마커 탭됨:');
    print('  - markerId: "${marker.markerId}"');
    print('  - postId: "${marker.postId}"');
    print('  - title: "${marker.title}"');
    print('  - postId == markerId: ${marker.postId == marker.markerId}');

    // 거리 체크
    if (_currentPosition == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('위치 정보를 가져올 수 없습니다')),
      );
      return;
    }

    final distance = _calculateDistance(_currentPosition!, marker.position);
    final isWithinRange = distance <= 200; // 200m 이내
    final currentUser = FirebaseAuth.instance.currentUser;
    final isOwner = currentUser != null && marker.creatorId == currentUser.uid;

    // 포스트 정보 가져오기 (이미지 포함)
    String imageUrl = '';
    String description = '';
    int reward = 0;
    
    try {
      final postDoc = await FirebaseFirestore.instance
          .collection('posts')
          .doc(marker.postId)
          .get();
          
      if (postDoc.exists) {
        final postData = postDoc.data()!;
        final mediaUrls = postData['mediaUrl'] as List<dynamic>?;
        if (mediaUrls != null && mediaUrls.isNotEmpty) {
          imageUrl = mediaUrls.first as String;
        }
        description = postData['description'] as String? ?? '';
        reward = postData['reward'] as int? ?? 0;
      }
    } catch (e) {
      print('포스트 정보 조회 실패: $e');
    }

    // 거리가 멀면 토스트 메시지 표시
    if (!isWithinRange) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${distance.toStringAsFixed(0)}m 떨어져 있습니다. 200m 이내로 접근해주세요.'),
          backgroundColor: Colors.orange,
          duration: Duration(seconds: 3),
        ),
      );
    }

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return Container(
          height: MediaQuery.of(context).size.height * 0.85,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: Column(
            children: [
              // 헤더
              Container(
                padding: EdgeInsets.all(20),
                child: Row(
                  children: [
                    Expanded(
                      child: Text(
                        marker.title.replaceAll(' 관련 포스트', '').replaceAll('관련 포스트', ''),
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: Icon(Icons.close),
                    ),
                  ],
                ),
              ),
              
              // 내용
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // 포스트 설명
                      if (description.isNotEmpty) ...[
                        Text(
                          description,
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.grey[700],
                            height: 1.5,
                          ),
                        ),
                        SizedBox(height: 20),
                      ],
                      
                      // 포스트 이미지 (오버레이 배지 포함)
                      if (imageUrl.isNotEmpty) ...[
                        Stack(
                          children: [
                            ClipRRect(
                              borderRadius: BorderRadius.circular(12),
                              child: Image.network(
                                imageUrl,
                                width: double.infinity,
                                height: MediaQuery.of(context).size.height * 0.6,
                                fit: BoxFit.contain,
                                errorBuilder: (context, error, stackTrace) {
                                  return Container(
                                    height: 300,
                                    decoration: BoxDecoration(
                                      color: Colors.grey[200],
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    child: Icon(
                                      Icons.image_not_supported,
                                      size: 48,
                                      color: Colors.grey[400],
                                    ),
                                  );
                                },
                              ),
                            ),
                            // 오버레이 배지들
                            Positioned(
                              top: 12,
                              left: 12,
                              child: Row(
                                children: [
                                  // 수령 가능/범위 밖 배지
                                  Container(
                                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                    decoration: BoxDecoration(
                                      color: isWithinRange ? Colors.green : Colors.grey,
                                      borderRadius: BorderRadius.circular(16),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.3),
                                          blurRadius: 4,
                                          offset: Offset(0, 2),
                                        ),
                                      ],
                                    ),
                                    child: Text(
                                      isWithinRange ? '수령 가능' : '범위 밖',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                  SizedBox(width: 8),
                                  // 수량 배지
                                  Container(
                                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                    decoration: BoxDecoration(
                                      color: marker.quantity > 0 ? Colors.blue : Colors.red,
                                      borderRadius: BorderRadius.circular(16),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.3),
                                          blurRadius: 4,
                                          offset: Offset(0, 2),
                                        ),
                                      ],
                                    ),
                                    child: Text(
                                      '${marker.quantity}개 남음',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            // 내 포스트 배지 (우상단)
                            if (isOwner)
                              Positioned(
                                top: 12,
                                right: 12,
                                child: Container(
                                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                  decoration: BoxDecoration(
                                    color: Colors.orange,
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.3),
                                        blurRadius: 4,
                                        offset: Offset(0, 2),
                                      ),
                                    ],
                                  ),
                                  child: Text(
                                    '내 포스트',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                              ),
                            // 포인트 배지 (좌하단)
                            if (reward > 0)
                              Positioned(
                                bottom: 12,
                                left: 12,
                                child: Container(
                                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [Colors.green[400]!, Colors.green[600]!],
                                      begin: Alignment.topLeft,
                                      end: Alignment.bottomRight,
                                    ),
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.3),
                                        blurRadius: 4,
                                        offset: Offset(0, 2),
                                      ),
                                    ],
                                  ),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Icon(Icons.monetization_on, color: Colors.white, size: 16),
                                      SizedBox(width: 4),
                                      Text(
                                        '+${reward}포인트',
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                          ],
                        ),
                        SizedBox(height: 20),
                      ] else if (description.isEmpty) ...[
                        // 이미지도 없고 설명도 없으면 기본 아이콘 표시
                        Container(
                          height: 200,
                          decoration: BoxDecoration(
                            color: Colors.grey[100],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Center(
                            child: Icon(
                              Icons.card_giftcard,
                              size: 64,
                              color: Colors.grey[400],
                            ),
                          ),
                        ),
                        SizedBox(height: 20),
                      ],
                      
                      
                    ],
                  ),
                ),
              ),
              
              // 하단 버튼
              Container(
                padding: EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.05),
                      blurRadius: 10,
                      offset: Offset(0, -2),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () => Navigator.pop(context),
                        style: OutlinedButton.styleFrom(
                          padding: EdgeInsets.symmetric(vertical: 14),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: Text('닫기'),
                      ),
                    ),
                    if (isOwner) ...[
                      SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.pop(context);
                            _removeMarker(marker);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.red,
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            '회수하기',
                            style: TextStyle(fontSize: 16, color: Colors.white, fontWeight: FontWeight.bold),
                          ),
                        ),
                      ),
                    ] else if (isWithinRange && marker.quantity > 0) ...[
                      SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.pop(context);
                            _collectPostFromMarker(marker);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            '수령하기 (${marker.quantity}개)',
                            style: TextStyle(fontSize: 16, color: Colors.white, fontWeight: FontWeight.bold),
                          ),
                        ),
                      ),
                    ] else if (marker.quantity <= 0) ...[
                      SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: null,
                          style: ElevatedButton.styleFrom(
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            '수량 소진',
                            style: TextStyle(fontSize: 16),
                          ),
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }


  // 마커에서 포스트 수령
  Future<void> _collectPostFromMarker(MarkerModel marker) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('로그인이 필요합니다')),
        );
        return;
      }

      // 현재 위치 확인
      if (_currentPosition == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('현재 위치를 확인할 수 없습니다')),
        );
        return;
      }

      // 마커 수집 가능 거리 확인 (200m 이내)
      final canCollect = MarkerService.canCollectMarker(
        _currentPosition!,
        LatLng(marker.position.latitude, marker.position.longitude),
      );

      if (!canCollect) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('마커에서 200m 이내로 접근해주세요')),
        );
        return;
      }

      // 수량 확인
      if (marker.quantity <= 0) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('수령 가능한 수량이 없습니다')),
        );
        return;
      }

      // 🔍 수령 시도 전 데이터 확인
      print('[COLLECT_DEBUG] 수령 시도:');
      print('  - markerId: "${marker.markerId}"');
      print('  - 현재 postId: "${marker.postId}"');
      print('  - postId == markerId: ${marker.postId == marker.markerId}');

      // 🚨 CRITICAL FIX: markerId로 실제 마커를 조회해서 올바른 postId 가져오기
      if (marker.postId == marker.markerId || marker.postId.isEmpty) {
        print('[COLLECT_FIX] postId가 잘못됨. markerId로 실제 마커 조회 중...');

        try {
          final markerDoc = await FirebaseFirestore.instance
              .collection('markers')
              .doc(marker.markerId)
              .get();

          if (markerDoc.exists && markerDoc.data() != null) {
            final markerData = markerDoc.data()!;
            final realPostId = markerData['postId'] as String?;

            print('[COLLECT_FIX] 실제 마커 데이터에서 postId 발견: "$realPostId"');

            if (realPostId != null && realPostId.isNotEmpty && realPostId != marker.markerId) {
              print('[COLLECT_FIX] 올바른 postId로 수령 진행: $realPostId');
              await PostService().collectPost(
                postId: realPostId,
                userId: user.uid,
              );
            } else {
              throw Exception('마커에서 유효한 postId를 찾을 수 없습니다');
            }
          } else {
            throw Exception('마커 문서를 찾을 수 없습니다: ${marker.markerId}');
          }
        } catch (e) {
          print('[COLLECT_FIX] 마커 조회 실패: $e');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('마커 정보를 가져올 수 없습니다: $e')),
          );
          return;
        }
      } else {
        print('[COLLECT_DEBUG] 기존 postId 사용: ${marker.postId}');
      await PostService().collectPost(
        postId: marker.postId,
        userId: user.uid,
      );
      }

      // 포인트 보상 정보와 함께 성공 메시지 표시
      final reward = marker.reward ?? 0;
      final message = reward > 0
          ? '포스트를 수령했습니다! 🎉\n${reward}포인트가 지급되었습니다! (${marker.quantity - 1}개 남음)'
          : '포스트를 수령했습니다! (${marker.quantity - 1}개 남음)';

      Navigator.of(context).pop(); // 다이얼로그 먼저 닫기
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
        ),
      );
      
      // 수령 완료 후 즉시 마커 목록 새로고침
      print('🔄 마커 수령 완료 - 마커 목록 새로고침 시작');
      
      // 1. 로컬에서 같은 포스트의 모든 마커 즉시 제거 (UI 반응성)
      setState(() {
        final postId = marker.postId;
        final removedCount = _markers.where((m) => m.postId == postId).length;
        _markers.removeWhere((m) => m.postId == postId);
        print('🗑️ 같은 포스트의 모든 마커 제거: ${marker.title} (${removedCount}개 마커 제거됨)');
        print('   - postId: $postId');
        _updateMarkers(); // 클러스터 재계산
      });
      
      // 2. 서버에서 실제 마커 상태 확인 및 동기화
      await Future.delayed(const Duration(milliseconds: 500));
      await _updatePostsBasedOnFogLevel();
      _updateReceivablePosts(); // 수령 가능 개수 업데이트
      
      print('✅ 마커 목록 새로고침 완료');

      // 메인 스크린의 포인트 새로고침 (GlobalKey 사용)
      try {
        final mainScreenState = MapScreen.mapKey.currentState;
        if (mainScreenState != null) {
          // MainScreen에 포인트 새로고침 메서드가 있다면 호출
          debugPrint('📱 메인 스크린 포인트 새로고침 요청');
        }
      } catch (e) {
        debugPrint('⚠️ 메인 스크린 포인트 새로고침 실패: $e');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('오류: $e')),
      );
    }
  }

  void _updateMarkers() {
    print('🔧 _updateMarkers 호출됨 - _markers 개수: ${_markers.length}');

    // MarkerModel을 새로운 클러스터링 시스템용으로 변환
    _visibleMarkerModels = _markers.map((marker) => ClusterMarkerModel(
      markerId: marker.markerId,
      position: marker.position,
    )).toList();

    // 새로운 클러스터링 시스템 적용
    _rebuildClusters();
    
    // 마커 업데이트 시 수령 가능 개수도 업데이트
    _updateReceivablePosts();
  }

  // LatLng -> 화면 좌표 변환 함수
  Offset _latLngToScreen(LatLng ll) {
    return latLngToScreenWebMercator(
      ll, 
      mapCenter: _mapCenter, 
      zoom: _mapZoom, 
      viewSize: _lastMapSize,
    );
  }

  // 새로운 클러스터링 시스템 - 근접 기반
  void _rebuildClusters() {
    if (_visibleMarkerModels.isEmpty) {
      setState(() {
        _clusteredMarkers = [];
      });
      return;
    }

    final thresholdPx = clusterThresholdPx(_mapZoom);
    
    // 근접 클러스터링 수행
    final buckets = buildProximityClusters(
      source: _visibleMarkerModels,
      toScreen: _latLngToScreen,
      thresholdPx: thresholdPx,
    );

    final markers = <Marker>[];
    
    for (final bucket in buckets) {
      if (!bucket.isCluster) {
        // 단일 마커
        final marker = bucket.single!;
        final isSuper = _isSuperMarker(marker);
        final imagePath = isSuper ? 'assets/images/ppam_super.png' : 'assets/images/ppam_work.png';
        final imageSize = isSuper ? 36.0 : 31.0;
        
        // 원본 MarkerModel에서 creatorId 가져오기
        final originalMarker = _markers.firstWhere(
          (m) => m.markerId == marker.markerId,
          orElse: () => throw Exception('Marker not found'),
        );
        
      markers.add(
        Marker(
            key: ValueKey('single_${marker.markerId}'),
          point: marker.position,
          width: 35,
          height: 35,
            child: SingleMarkerWidget(
              imagePath: imagePath,
              size: imageSize,
              isSuper: isSuper,
              userId: originalMarker.creatorId,
              onTap: () => _onTapSingleMarker(marker),
            ),
          ),
        );
      } else {
        // 클러스터 마커
        final rep = bucket.representative!;
        markers.add(
          Marker(
            key: ValueKey('cluster_${rep.markerId}_${bucket.items!.length}'),
            point: rep.position,
            width: 40,
            height: 40,
            child: GestureDetector(
              onTap: () => _zoomIntoCluster(bucket),
              child: SimpleClusterDot(count: bucket.items!.length),
          ),
        ),
      );
      }
    }

    setState(() {
      _clusteredMarkers = markers;
    });

    print('🔧 근접 클러스터링 완료 (줌 ${_mapZoom.toStringAsFixed(1)}, 임계값 ${thresholdPx.toInt()}px): ${buckets.length}개 그룹, ${markers.length}개 마커');
  }

  // 슈퍼 마커인지 확인
  bool _isSuperMarker(ClusterMarkerModel marker) {
    // 원본 MarkerModel에서 reward 확인
    final originalMarker = _markers.firstWhere(
      (m) => m.markerId == marker.markerId,
      orElse: () => throw Exception('Marker not found'),
    );
    final markerReward = originalMarker.reward ?? 0;
    return markerReward >= AppConsts.superRewardThreshold;
  }

  // 단일 마커 탭 처리
  void _onTapSingleMarker(ClusterMarkerModel marker) {
    // 기존 MarkerModel을 찾아서 상세 정보 표시
    final originalMarker = _markers.firstWhere(
      (m) => m.markerId == marker.markerId,
      orElse: () => throw Exception('Marker not found'),
    );
    _showMarkerDetails(originalMarker);
  }

  // 클러스터 탭 시 확대
  void _zoomIntoCluster(ClusterOrMarker cluster) {
    final rep = cluster.representative!;
    final targetZoom = (_mapZoom + 1.5).clamp(14.0, 16.0); // 앱의 줌 범위 내에서
    _mapController?.move(rep.position, targetZoom);
  }




  Future<void> _collectMarker(MarkerModel marker) async {
    // TODO: 새로운 구조에 맞게 구현 예정
    print('마커 수집: ${marker.title}');
  }

  void _showMarkerDetail(MarkerModel marker) {
    // TODO: 새로운 구조에 맞게 구현 예정
    print('마커 상세: ${marker.title}');
  }

  // 마커 회수 (삭제)
  Future<void> _removeMarker(MarkerModel marker) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('로그인이 필요합니다')),
        );
        return;
      }

      // 배포자 확인
      if (marker.creatorId != user.uid) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('자신이 배포한 포스트만 회수할 수 있습니다')),
        );
        return;
      }

      debugPrint('');
      debugPrint('🟢🟢🟢 [map_screen] 회수 버튼 클릭 - 마커 정보 🟢🟢🟢');
      debugPrint('🟢 marker.markerId: ${marker.markerId}');
      debugPrint('🟢 marker.postId: ${marker.postId}');
      debugPrint('🟢 PostService().recallMarker() 호출 시작...');
      debugPrint('');

      // 개별 마커 회수 (포스트와 다른 마커는 유지)
      // await PostService().recallMarker(marker.markerId); // TODO: 메소드 구현 필요

      debugPrint('');
      debugPrint('🟢 [map_screen] PostService().recallMarker() 완료');
      debugPrint('🟢🟢🟢 ========================================== 🟢🟢🟢');
      debugPrint('');

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('마커를 회수했습니다')),
      );
      
      // ❌ Navigator.of(context).pop() 제거 - 버튼에서 이미 닫음
      _updatePostsBasedOnFogLevel(); // 마커 목록 새로고침
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('포스트 회수 중 오류가 발생했습니다: $e')),
      );
    }
  }

  // 클라이언트사이드 필터링 제거됨 - 서버사이드에서 처리
  // bool _matchesFilter(PostModel post) { ... } // 제거됨


  void _showPostDetail(PostModel post) {
    final currentUserId = FirebaseAuth.instance.currentUser?.uid;
    final isOwner = post.creatorId == currentUserId;
    
    showDialog(
      context: context,
      builder: (context) => FutureBuilder<Map<String, dynamic>?>(
        future: isOwner ? null : UserService().getUserById(post.creatorId),
        builder: (context, snapshot) {
          String creatorInfo = isOwner ? '본인' : post.creatorName;
          String creatorEmail = '';
          
          if (!isOwner && snapshot.hasData && snapshot.data != null) {
            creatorEmail = snapshot.data!['email'] ?? '';
          }
          
          return AlertDialog(
        title: Text(post.title),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
            Text('리워드: ${post.reward}원'),
                SizedBox(height: 8),
            Text('설명: ${post.description}'),
                SizedBox(height: 8),
            Text('기본 만료일: ${post.defaultExpiresAt.toString().split(' ')[0]}'),
                SizedBox(height: 8),
            if (isOwner)
                  Text('배포자: 본인', style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold))
                else ...[
                  Text('배포자: $creatorInfo', style: TextStyle(color: Colors.grey[700], fontWeight: FontWeight.w500)),
                  if (creatorEmail.isNotEmpty) ...[
                    SizedBox(height: 4),
                    Text('이메일: $creatorEmail', style: TextStyle(color: Colors.grey[600], fontSize: 12)),
                  ],
                ],
            ],
          ),
          actions: [
            TextButton(
            onPressed: () => Navigator.pop(context),
              child: const Text('닫기'),
            ),
          if (isOwner)
              TextButton(
                onPressed: () {
                Navigator.pop(context);
                _removePost(post); // Only owner can remove
              },
              child: const Text('회수', style: TextStyle(color: Colors.red)),
            )
          else
              TextButton(
                onPressed: () {
                Navigator.pop(context);
                _collectPost(post); // Others can collect
              },
              child: const Text('수집'),
            ),
        ],
          );
        },
      ),
    );
  }

  Future<void> _collectPost(PostModel post) async {
    try {
      await PostService().collectPost(
        postId: post.postId, 
        userId: FirebaseAuth.instance.currentUser!.uid
      );
      // 🚀 실시간 스트림이 자동으로 업데이트되므로 별도 새로고침 불필요
      // _loadPosts(forceRefresh: true); // 포스트 목록 새로고침

      // 효과음/진동
      await _playReceiveEffects(1);

      // 캐러셀 팝업으로 포스트 내용 표시
      await _showPostReceivedCarousel([post]);

    } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('포스트 수집 중 오류가 발생했습니다: $e')),
      );
    }
  }

  Future<void> _removePost(PostModel post) async {
    try {
      // 포스트 회수 (마커도 함께 회수 처리됨)
      await PostService().recallPost(post.postId);
      // 🚀 실시간 스트림이 자동으로 업데이트되므로 별도 새로고침 불필요
      // _loadPosts(forceRefresh: true); // 포스트 목록 새로고침
          ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('포스트를 회수했습니다!')),
          );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('포스트 회수 중 오류가 발생했습니다: $e')),
      );
    }
  }

  // 포스트 수령 캐러셀 팝업
  Future<void> _showPostReceivedCarousel(List<PostModel> posts) async {
    if (posts.isEmpty) return;

    // 확인 상태 추적
    final confirmedPosts = <String>{};
    final postService = PostService();
    final currentUserId = FirebaseAuth.instance.currentUser?.uid;
    
    if (currentUserId == null) return;

    final totalReward = posts.fold(0, (sum, post) => sum + (post.reward ?? 0));
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      isDismissible: true, // 뒤로가기/외부 터치로 닫을 수 있음 (미확인 포스트로 이동)
      backgroundColor: Colors.transparent,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => Container(
          height: MediaQuery.of(context).size.height * 0.8,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
        child: Column(
          children: [
            // 상단 헤더
            Container(
              padding: EdgeInsets.all(20),
              child: Column(
                children: [
                  Icon(Icons.check_circle, color: Colors.green, size: 48),
                  SizedBox(height: 8),
                  Text(
                    '${posts.length}개 포스트 수령됨 (확인 대기)',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  if (totalReward > 0) ...[
                    SizedBox(height: 4),
                    Text(
                      '총 +${totalReward}포인트',
                      style: TextStyle(
                        fontSize: 16, 
                        color: Colors.green, 
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ],
              ),
            ),
            
            // 캐러셀 영역
            Expanded(
              child: PageView.builder(
                itemCount: posts.length,
                itemBuilder: (context, index) {
                  final post = posts[index];
                  final isConfirmed = confirmedPosts.contains(post.postId);
                  
                  return GestureDetector(
                    onTap: () async {
                      if (isConfirmed) return; // 이미 확인한 포스트는 무시
                      
                      try {
                        // 멱등 ID로 직접 조회
                        final collectionId = '${post.postId}_$currentUserId';
                        final collectionDoc = await FirebaseFirestore.instance
                            .collection('post_collections')
                            .doc(collectionId)
                            .get();
                        
                        if (!collectionDoc.exists) {
                          if (!mounted) return;
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('수령 기록을 찾을 수 없습니다')),
                          );
                          return;
                        }
                        
                        final collectionData = collectionDoc.data()!;
                        final creatorId = collectionData['postCreatorId'] ?? '';
                        final reward = collectionData['reward'] ?? 0;
                        
                        // 포스트 확인 처리
                        // await postService.confirmPost( // TODO: confirmPost 메소드 구현
                        //   collectionId: collectionId,
                        //   userId: currentUserId,
                        //   postId: post.postId,
                        //   creatorId: creatorId,
                        //   reward: reward,
                        // );
                        
                        // 확인 상태 업데이트
                        setState(() {
                          confirmedPosts.add(post.postId);
                        });
                        
                        // 피드백
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('✅ 포스트 확인 완료! +${reward}포인트'),
                            backgroundColor: Colors.green,
                            duration: Duration(seconds: 1),
                          ),
                        );
                      } catch (e) {
                        debugPrint('포스트 확인 실패: $e');
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('포스트 확인에 실패했습니다')),
                        );
                      }
                    },
                    child: _buildPostCarouselPage(post, index + 1, posts.length, isConfirmed),
                  );
                },
              ),
            ),
            
            // 하단 인디케이터 + 버튼
            Container(
              padding: EdgeInsets.all(20),
              child: Column(
                children: [
                  // 페이지 인디케이터
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(posts.length, (index) {
                      final post = posts[index];
                      final isConfirmed = confirmedPosts.contains(post.postId);
                      return Container(
                        width: 8,
                        height: 8,
                        margin: EdgeInsets.symmetric(horizontal: 4),
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: isConfirmed ? Colors.green : Colors.grey[300],
                        ),
                      );
                    }),
                  ),
                  SizedBox(height: 12),
                  // 확인 상태 표시
                  Text(
                    '${confirmedPosts.length}/${posts.length} 확인 완료',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  SizedBox(height: 16),
                  
                  // 항상 표시되는 버튼들
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: () {
                            Navigator.pop(context); // 다이얼로그 닫기
                            // 인박스로 이동
                            if (widget.onNavigateToInbox != null) {
                              widget.onNavigateToInbox!();
                            }
                          },
                          icon: Icon(Icons.inbox),
                          label: Text('인박스 보기'),
                          style: OutlinedButton.styleFrom(
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                        ),
                      ),
                      SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () => Navigator.pop(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue[600],
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          child: Text(
                            '나중에 확인',
                            style: TextStyle(fontSize: 15, color: Colors.white, fontWeight: FontWeight.bold),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
        ),
      ),
    );
  }

  // 캐러셀 개별 페이지 위젯
  Widget _buildPostCarouselPage(PostModel post, int currentIndex, int totalCount, bool isConfirmed) {
    return SingleChildScrollView(
      padding: EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 진행률 및 상태 표시
          Row(
            children: [
              Text(
                '$currentIndex/$totalCount',
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
              SizedBox(width: 8),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: isConfirmed ? Colors.green : Colors.orange,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  isConfirmed ? '✓ 확인완료' : '터치하여 확인',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 11,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Spacer(),
              if (totalCount > 1)
                Text(
                  '👈 스와이프',
                  style: TextStyle(
                    color: Colors.grey[500],
                    fontSize: 12,
                  ),
                ),
            ],
          ),
          
          SizedBox(height: 20),
          
          // 포스트 제목
          Text(
            post.title,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
          ),
          
          SizedBox(height: 12),
          
          // 포스트 설명
          if (post.description.isNotEmpty) ...[
            Text(
              post.description,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[700],
                height: 1.5,
              ),
            ),
            SizedBox(height: 20),
          ],
          
          // 포스트 이미지
          if (post.mediaUrl.isNotEmpty) ...[
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                post.mediaUrl.first,
                width: double.infinity,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return Container(
                    height: 200,
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.image_not_supported,
                      size: 48,
                      color: Colors.grey[400],
                    ),
                  );
                },
              ),
            ),
            SizedBox(height: 20),
          ],
          
          // 포인트 정보
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.green[50],
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.green[200]!),
            ),
            child: Row(
              children: [
                Icon(Icons.monetization_on, color: Colors.green, size: 24),
                SizedBox(width: 12),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '포인트 지급',
                      style: TextStyle(
                        color: Colors.green[700],
                        fontWeight: FontWeight.w600,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      '+${post.reward ?? 0}포인트',
                      style: TextStyle(
                        color: Colors.green[700],
                        fontWeight: FontWeight.bold,
                        fontSize: 18,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          
          // 확인 안내 (확인되지 않은 경우에만)
          if (!isConfirmed) ...[
            SizedBox(height: 16),
